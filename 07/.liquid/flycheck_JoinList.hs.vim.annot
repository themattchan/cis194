14:1-14:12::JoinList.quickCheckN :: "forall a.\n(Test.QuickCheck.Property.Testable [Contravariant]\n[] a) =>\nGHC.Types.Int -> a -> (GHC.Types.IO ())"
14:13-14:14::n :: "GHC.Types.Int"
14:17-14:31::lq_anf__d6UX :: "Test.QuickCheck.Test.Args -> a -> (GHC.Types.IO ())"
14:32-14:33::_ :: "(Test.QuickCheck.Test.Args -> a -> (GHC.Types.IO ()))\n-> Test.QuickCheck.Test.Args -> a -> (GHC.Types.IO ())"
14:34-14:41::_ :: "{v : Test.QuickCheck.Test.Args | v == Test.QuickCheck.Test.stdArgs}"
14:57-14:58::_ :: "{v : GHC.Types.Int | v == n}"
18:10-18:20::JoinList.$fMonoidInt :: "(Data.Monoid.Monoid GHC.Types.Int)"
19:3-19:9::$cmempty :: "{v : GHC.Types.Int | v == (1  :  int)}"
19:13-19:14::_ :: "{v : GHC.Types.Int | v == (1  :  int)}"
20:3-20:10::$cmappend :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n-> {v : GHC.Types.Int | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
20:13-20:16::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int\n-> {v : GHC.Types.Int | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
25:29-25:31::JoinList.$fEqJoinList :: "forall a b.\n(GHC.Classes.Eq [Contravariant]\n[] a, GHC.Classes.Eq [Contravariant]\n[] b) =>\n(GHC.Classes.Eq (JoinList.JoinList a b))"
25:33-25:37::JoinList.$fShowJoinList :: "forall a b.\n(GHC.Show.Show [Contravariant]\n[] a, GHC.Show.Show [Contravariant]\n[] b) =>\n(GHC.Show.Show (JoinList.JoinList a b))"
31:1-31:6::JoinList.+++ :: "forall a b.\n(Data.Monoid.Monoid [Bivariant]\n[] a) =>\n(JoinList.JoinList a b)\n-> (JoinList.JoinList a b) -> (JoinList.JoinList a b)"
31:13-31:14::y :: "(JoinList.JoinList a b)"
31:17-31:18::y :: "{v : (JoinList.JoinList a b) | v == y}"
32:17-32:18::ds_d6U4 :: "(JoinList.JoinList a b)"
33:17-33:23::_ :: "a\n-> (JoinList.JoinList a b)\n-> (JoinList.JoinList a b)\n-> (JoinList.JoinList a b)"
33:25-33:32::_ :: "a -> a -> a"
33:34-33:37::_ :: "(JoinList.JoinList a b) -> a"
33:38-33:39::ds_d6U4 :: "(JoinList.JoinList a b)"
33:42-33:45::_ :: "(JoinList.JoinList a b) -> a"
33:46-33:47::y :: "{v : (JoinList.JoinList a b) | v == y}"
33:50-33:51::ds_d6U4 :: "(JoinList.JoinList a b)"
33:52-33:53::y :: "{v : (JoinList.JoinList a b) | v == y}"
36:1-36:4::JoinList.tag :: "forall a b.\n(Data.Monoid.Monoid [Bivariant]\n[] a) =>\n(JoinList.JoinList a b) -> a"
36:22-36:28::$dMonoid_a6OL :: "{v : (Data.Monoid.Monoid a) | v == $dMonoid_a6OL}"
37:22-37:23::t :: "{VV : a | VV == t}"
38:22-38:23::t :: "{VV : a | VV == t}"
45:1-45:4::JoinList.len :: "forall a b.\n(Sized.Sized [Contravariant]\n[] a, Data.Monoid.Monoid [Bivariant]\n[] a) =>\n(JoinList.JoinList a b) -> GHC.Types.Int"
45:13-45:20::_ :: "Sized.Size -> GHC.Types.Int"
45:21-45:27::lq_anf__d6V4 :: "Sized.Size"
46:13-46:20::Sized.getSize :: "Sized.Size -> GHC.Types.Int"
46:21-46:22::_ :: "(Sized.Size -> GHC.Types.Int)\n-> (a -> Sized.Size) -> a -> exists [Sized.Size].GHC.Types.Int"
46:23-46:27::lq_anf__d6V1 :: "a -> Sized.Size"
46:28-46:29::_ :: "(a -> GHC.Types.Int) -> a -> GHC.Types.Int"
46:30-46:33::_ :: "(JoinList.JoinList a b) -> a"
46:34-46:35::ds_d6TQ :: "(JoinList.JoinList a b)"
49:1-49:7::JoinList.indexJ :: "forall a b.\n(Sized.Sized [Contravariant]\n[] a, Data.Monoid.Monoid [Bivariant]\n[] a) =>\nGHC.Types.Int -> (JoinList.JoinList a b) -> (Data.Maybe.Maybe b)"
49:27-49:31::_ :: "x1:a\n-> {v : (Data.Maybe.Maybe a) | isJust v <=> true && fromJust v == x1}"
49:32-49:33::e :: "{VV : a | VV == e}"
51:5-51:6::ds_d6TT :: "GHC.Types.Int"
51:7-51:8::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Bool | Prop v <=> x1 < v}"
51:9-51:12::_ :: "(JoinList.JoinList a b) -> GHC.Types.Int"
51:13-51:14::x :: "{v : (JoinList.JoinList a b) | v == x}"
51:27-51:33::JoinList.indexJ :: "forall a b.\n(Sized.Sized [Contravariant]\n[] a, Data.Monoid.Monoid [Bivariant]\n[] a) =>\nGHC.Types.Int -> (JoinList.JoinList a b) -> (Data.Maybe.Maybe b)"
51:34-51:35::ds_d6TT :: "GHC.Types.Int"
51:36-51:37::x :: "{v : (JoinList.JoinList a b) | v == x}"
52:27-52:33::JoinList.indexJ :: "forall a b.\n(Sized.Sized [Contravariant]\n[] a, Data.Monoid.Monoid [Bivariant]\n[] a) =>\nGHC.Types.Int -> (JoinList.JoinList a b) -> (Data.Maybe.Maybe b)"
52:35-52:36::ds_d6TT :: "GHC.Types.Int"
52:37-52:38::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
52:39-52:42::_ :: "(JoinList.JoinList a b) -> GHC.Types.Int"
52:43-52:44::x :: "{v : (JoinList.JoinList a b) | v == x}"
52:46-52:47::y :: "{v : (JoinList.JoinList a b) | v == y}"
53:27-53:34::_ :: "{v : (Data.Maybe.Maybe a) | isJust v <=> false}"
56:1-56:6::JoinList.dropJ :: "forall a b.\n(Sized.Sized [Contravariant]\n[] a, Data.Monoid.Monoid [Bivariant]\n[] a) =>\nGHC.Types.Int -> (JoinList.JoinList a b) -> (JoinList.JoinList a b)"
56:7-56:8::i :: "GHC.Types.Int"
56:9-56:10::l :: "(JoinList.JoinList a b)"
56:13-56:14::i :: "{v : GHC.Types.Int | v == i}"
56:15-56:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Bool | Prop v <=> x1 <= v}"
56:18-56:19::lq_anf__d6Vw :: "{v : GHC.Types.Int | v == (0  :  int)}"
56:22-56:23::l :: "{v : (JoinList.JoinList a b) | v == l}"
58:5-58:6::i :: "{v : GHC.Types.Int | v == i}"
58:7-58:8::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Bool | Prop v <=> x1 < v}"
58:9-58:12::_ :: "(JoinList.JoinList a b) -> GHC.Types.Int"
58:13-58:14::x :: "{v : (JoinList.JoinList a b) | v == x}"
58:17-58:22::JoinList.dropJ :: "forall a b.\n(Sized.Sized [Contravariant]\n[] a, Data.Monoid.Monoid [Bivariant]\n[] a) =>\nGHC.Types.Int -> (JoinList.JoinList a b) -> (JoinList.JoinList a b)"
58:23-58:24::i :: "{v : GHC.Types.Int | v == i}"
58:25-58:26::x :: "{v : (JoinList.JoinList a b) | v == x}"
58:27-58:30::_ :: "(JoinList.JoinList a b)\n-> (JoinList.JoinList a b) -> (JoinList.JoinList a b)"
58:31-58:32::y :: "{v : (JoinList.JoinList a b) | v == y}"
59:17-59:22::JoinList.dropJ :: "forall a b.\n(Sized.Sized [Contravariant]\n[] a, Data.Monoid.Monoid [Bivariant]\n[] a) =>\nGHC.Types.Int -> (JoinList.JoinList a b) -> (JoinList.JoinList a b)"
59:24-59:25::i :: "{v : GHC.Types.Int | v == i}"
59:26-59:27::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
59:28-59:31::_ :: "(JoinList.JoinList a b) -> GHC.Types.Int"
59:32-59:33::x :: "{v : (JoinList.JoinList a b) | v == x}"
59:35-59:36::y :: "{v : (JoinList.JoinList a b) | v == y}"
60:13-60:18::_ :: "(JoinList.JoinList a b)"
63:1-63:6::JoinList.takeJ :: "forall a b.\n(Sized.Sized [Contravariant]\n[] a, Data.Monoid.Monoid [Bivariant]\n[] a) =>\nGHC.Types.Int -> (JoinList.JoinList a b) -> (JoinList.JoinList a b)"
63:7-63:8::i :: "GHC.Types.Int"
63:9-63:10::l :: "(JoinList.JoinList a b)"
63:13-63:14::i :: "{v : GHC.Types.Int | v == i}"
63:15-63:17::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Bool | Prop v <=> x1 <= v}"
63:18-63:19::lq_anf__d6VI :: "{v : GHC.Types.Int | v == (0  :  int)}"
63:22-63:27::JoinList.Empty :: "forall a b. (JoinList.JoinList a b)"
65:5-65:6::i :: "{v : GHC.Types.Int | v == i}"
65:7-65:8::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Bool | Prop v <=> x1 < v}"
65:9-65:12::_ :: "(JoinList.JoinList a b) -> GHC.Types.Int"
65:13-65:14::x :: "{v : (JoinList.JoinList a b) | v == x}"
65:17-65:22::JoinList.takeJ :: "forall a b.\n(Sized.Sized [Contravariant]\n[] a, Data.Monoid.Monoid [Bivariant]\n[] a) =>\nGHC.Types.Int -> (JoinList.JoinList a b) -> (JoinList.JoinList a b)"
65:23-65:24::i :: "{v : GHC.Types.Int | v == i}"
65:25-65:26::x :: "{v : (JoinList.JoinList a b) | v == x}"
66:17-66:18::x :: "{v : (JoinList.JoinList a b) | v == x}"
66:19-66:22::_ :: "(JoinList.JoinList a b)\n-> (JoinList.JoinList a b) -> (JoinList.JoinList a b)"
66:23-66:28::JoinList.takeJ :: "forall a b.\n(Sized.Sized [Contravariant]\n[] a, Data.Monoid.Monoid [Bivariant]\n[] a) =>\nGHC.Types.Int -> (JoinList.JoinList a b) -> (JoinList.JoinList a b)"
66:30-66:31::i :: "{v : GHC.Types.Int | v == i}"
66:32-66:33::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
66:34-66:37::_ :: "(JoinList.JoinList a b) -> GHC.Types.Int"
66:38-66:39::x :: "{v : (JoinList.JoinList a b) | v == x}"
66:41-66:42::y :: "{v : (JoinList.JoinList a b) | v == y}"
67:13-67:14::_ :: "{v : (JoinList.JoinList a b) | v == l}"
75:1-75:10::JoinList.scoreLine :: "[GHC.Types.Char]\n-> (JoinList.JoinList Scrabble.Score [GHC.Types.Char])"
75:11-75:12::l :: "[GHC.Types.Char]"
75:15-75:21::_ :: "Scrabble.Score\n-> [GHC.Types.Char]\n-> (JoinList.JoinList Scrabble.Score [GHC.Types.Char])"
75:23-75:34::_ :: "[GHC.Types.Char] -> Scrabble.Score"
75:35-75:36::l :: "{v : [GHC.Types.Char] | v == l && len v >= 0}"
75:38-75:39::l :: "{v : [GHC.Types.Char] | v == l && len v >= 0}"
79:10-79:48::JoinList.$fBufferJoinList :: "(Buffer.Buffer (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char]))"
82:3-82:11::$ctoString :: "(JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> [GHC.Types.Char]"
82:29-82:31::GHC.Types.[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x4 VV -> p x4> | null v <=> true && len v == 0}"
83:29-83:30::s :: "{v : [GHC.Types.Char] | v == s && len v >= 0}"
84:29-84:37::JoinList.$fBufferJoinList :: "(Buffer.Buffer (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char]))"
84:38-84:39::l :: "{v : (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char]) | v == l}"
84:40-84:42::_ :: "x1:[GHC.Types.Char]\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | len v == len x1 + len v}"
84:43-84:51::JoinList.$fBufferJoinList :: "(Buffer.Buffer (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char]))"
84:52-84:53::r :: "{v : (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char]) | v == r}"
88:3-88:13::$cfromString :: "[GHC.Types.Char]\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])"
88:14-88:15::s :: "[GHC.Types.Char]"
88:18-88:24::_ :: "(Scrabble.Score, Sized.Size)\n-> [GHC.Types.Char]\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])"
88:25-88:48::lq_anf__d6W6 :: "(Scrabble.Score, Sized.Size)"
88:26-88:37::_ :: "[GHC.Types.Char] -> Scrabble.Score"
88:38-88:39::s :: "{v : [GHC.Types.Char] | v == s && len v >= 0}"
88:41-88:45::_ :: "GHC.Types.Int -> Sized.Size"
88:46-88:47::lq_anf__d6W4 :: "{v : GHC.Types.Int | v == (1  :  int)}"
88:49-88:50::s :: "{v : [GHC.Types.Char] | v == s && len v >= 0}"
93:3-93:7::$cline :: "GHC.Types.Int\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> (Data.Maybe.Maybe [GHC.Types.Char])"
93:10-93:16::_ :: "GHC.Types.Int\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> (Data.Maybe.Maybe [GHC.Types.Char])"
99:3-99:14::$creplaceLine :: "GHC.Types.Int\n-> [GHC.Types.Char]\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])"
99:15-99:16::n :: "GHC.Types.Int"
99:17-99:18::s :: "[GHC.Types.Char]"
99:19-99:20::b :: "(JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])"
99:23-99:28::_ :: "GHC.Types.Int\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])"
99:30-99:31::n :: "{v : GHC.Types.Int | v == n}"
99:31-99:32::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
99:32-99:33::lq_anf__d6X1 :: "{v : GHC.Types.Int | v == (1  :  int)}"
99:35-99:36::b :: "{v : (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char]) | v == b}"
99:37-99:40::_ :: "(JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])"
99:41-99:51::JoinList.$fBufferJoinList :: "(Buffer.Buffer (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char]))"
99:52-99:53::s :: "{v : [GHC.Types.Char] | v == s && len v >= 0}"
99:54-99:57::_ :: "(JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])"
99:58-99:63::_ :: "GHC.Types.Int\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])"
99:64-99:65::n :: "{v : GHC.Types.Int | v == n}"
99:66-99:67::b :: "{v : (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char]) | v == b}"
103:3-103:11::$cnumLines :: "(JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> GHC.Types.Int"
103:14-103:17::_ :: "(JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> GHC.Types.Int"
108:3-108:8::$cvalue :: "(JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> GHC.Types.Int"
108:17-108:18::GHC.Types.I# :: "x1:GHC.Prim.Int# -> {v : GHC.Types.Int | v == (x1  :  int)}"
109:17-109:25::Scrabble.getScore :: "Scrabble.Score -> GHC.Types.Int"
109:26-109:27::_ :: "(Scrabble.Score -> GHC.Types.Int)\n-> ((Scrabble.Score, Sized.Size) -> Scrabble.Score)\n-> (Scrabble.Score, Sized.Size)\n-> exists [Scrabble.Score].GHC.Types.Int"
109:28-109:31::lq_anf__d6VV :: "(Scrabble.Score, Sized.Size) -> Scrabble.Score"
109:32-109:33::_ :: "((Scrabble.Score, Sized.Size) -> GHC.Types.Int)\n-> (Scrabble.Score, Sized.Size) -> GHC.Types.Int"
109:34-109:37::_ :: "(JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])\n-> (Scrabble.Score, Sized.Size)"
109:38-109:39::ds_d6UD :: "(JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])"
113:1-113:5::JoinList.main :: "(GHC.Types.IO ())"
113:8-113:17::JoinList.$fBufferJoinList :: "(Buffer.Buffer (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char]))"
113:18-113:24::lq_anf__d6Xa :: "(Editor.Editor (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char]) ())"
113:25-113:31::buffer :: "{v : (JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char]) | v == buffer}"
117:5-117:11::buffer :: "(JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])"
117:14-117:19::_ :: "(JoinList.JoinList (Scrabble.Score, Sized.Size) [GHC.Types.Char])"