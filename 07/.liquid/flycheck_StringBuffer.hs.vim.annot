8:10-8:23::StringBuffer.$fBuffer[] :: "(Buffer.Buffer [GHC.Types.Char])"
9:3-9:11::$ctoString :: "x1:[GHC.Types.Char] -> {v : [GHC.Types.Char] | v == x1}"
9:18-9:20::_ :: "x1:[GHC.Types.Char] -> {v : [GHC.Types.Char] | v == x1}"
10:3-10:13::$cfromString :: "x1:[GHC.Types.Char] -> {v : [GHC.Types.Char] | v == x1}"
10:18-10:20::_ :: "x1:[GHC.Types.Char] -> {v : [GHC.Types.Char] | v == x1}"
11:3-11:7::$cline :: "GHC.Types.Int\n-> [GHC.Types.Char] -> (Data.Maybe.Maybe [GHC.Types.Char])"
11:8-11:9::n :: "GHC.Types.Int"
11:10-11:11::b :: "[GHC.Types.Char]"
11:18-11:27::_ :: "GHC.Types.Int\n-> [[GHC.Types.Char]] -> (Data.Maybe.Maybe [GHC.Types.Char])"
11:28-11:29::n :: "{v : GHC.Types.Int | v == n}"
11:31-11:36::_ :: "[GHC.Types.Char] -> [[GHC.Types.Char]]"
11:37-11:38::b :: "{v : [GHC.Types.Char] | v == b && len v >= 0}"
12:3-12:14::$creplaceLine :: "GHC.Types.Int\n-> [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]"
12:15-12:16::n :: "GHC.Types.Int"
12:17-12:18::l :: "[GHC.Types.Char]"
12:19-12:20::b :: "[GHC.Types.Char]"
12:23-12:30::Data.List.unlines :: "[[GHC.Types.Char]] -> [GHC.Types.Char]"
12:31-12:32::_ :: "([[GHC.Types.Char]] -> [GHC.Types.Char])\n-> ([GHC.Types.Char] -> [[GHC.Types.Char]])\n-> [GHC.Types.Char]\n-> exists [[[GHC.Types.Char]]].[GHC.Types.Char]"
12:33-12:40::_ :: "([[GHC.Types.Char]] -> [[GHC.Types.Char]] -> [[GHC.Types.Char]])\n-> ([[GHC.Types.Char]], [[GHC.Types.Char]]) -> [[GHC.Types.Char]]"
12:41-12:53::replaceLine' :: "[[GHC.Types.Char]] -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]"
12:54-12:55::_ :: "(([[GHC.Types.Char]], [[GHC.Types.Char]]) -> [[GHC.Types.Char]])\n-> ([GHC.Types.Char] -> ([[GHC.Types.Char]], [[GHC.Types.Char]]))\n-> [GHC.Types.Char]\n-> exists [([[GHC.Types.Char]], [[GHC.Types.Char]])].[[GHC.Types.Char]]"
12:56-12:63::_ :: "x1:GHC.Types.Int\n-> x2:[[GHC.Types.Char]]\n-> ({v : [[GHC.Types.Char]] | not (x1 >= 0) => len v == 0 && x1 >= 0 => len x2 < x1 => len v == len x2 && not (len x2 < x1) => len v == x1}, [[GHC.Types.Char]])<\\x4 VV -> len v == len x2 - len x4>"
12:64-12:65::n :: "{v : GHC.Types.Int | v == n}"
12:66-12:67::_ :: "([[GHC.Types.Char]] -> ([[GHC.Types.Char]], [[GHC.Types.Char]]))\n-> ([GHC.Types.Char] -> [[GHC.Types.Char]])\n-> [GHC.Types.Char]\n-> exists [[[GHC.Types.Char]]].([[GHC.Types.Char]], [[GHC.Types.Char]])"
12:68-12:73::Data.List.lines :: "[GHC.Types.Char] -> [[GHC.Types.Char]]"
12:74-12:75::_ :: "([GHC.Types.Char] -> [GHC.Types.Char])\n-> [GHC.Types.Char] -> [GHC.Types.Char]"
12:76-12:77::b :: "{v : [GHC.Types.Char] | v == b && len v >= 0}"
13:13-13:25::replaceLine' :: "[[GHC.Types.Char]] -> [[GHC.Types.Char]] -> [[GHC.Types.Char]]"
13:26-13:29::pre :: "[[GHC.Types.Char]]"
13:35-13:38::pre :: "{v : [[GHC.Types.Char]] | v == pre && len v >= 0}"
14:39-14:42::pre :: "{v : [[GHC.Types.Char]] | v == pre && len v >= 0}"
14:43-14:45::_ :: "x1:[[GHC.Types.Char]]\n-> x2:[[GHC.Types.Char]]\n-> {v : [[GHC.Types.Char]] | len v == len x1 + len v}"
14:46-14:47::l :: "{v : [GHC.Types.Char] | v == l && len v >= 0}"
14:47-14:48::_ :: "x1:[GHC.Types.Char]\n-> x2:[[GHC.Types.Char]]\n-> {v : [[GHC.Types.Char]] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
14:48-14:50::ls :: "{v : [[GHC.Types.Char]] | v == ls && len v >= 0}"
15:3-15:11::$cnumLines :: "[GHC.Types.Char] -> GHC.Types.Int"
15:18-15:24::lq_anf__d1uB :: "x1:[[GHC.Types.Char]] -> {v : GHC.Types.Int | v == len x1}"
15:25-15:26::_ :: "([[GHC.Types.Char]] -> GHC.Types.Int)\n-> ([GHC.Types.Char] -> [[GHC.Types.Char]])\n-> [GHC.Types.Char]\n-> exists [[[GHC.Types.Char]]].GHC.Types.Int"
15:27-15:32::Data.List.lines :: "[GHC.Types.Char] -> [[GHC.Types.Char]]"
16:3-16:8::$cvalue :: "[GHC.Types.Char] -> GHC.Types.Int"
16:18-16:24::lq_anf__d1uA :: "x1:[[GHC.Types.Char]] -> {v : GHC.Types.Int | v == len x1}"
16:25-16:26::_ :: "([[GHC.Types.Char]] -> GHC.Types.Int)\n-> ([GHC.Types.Char] -> [[GHC.Types.Char]])\n-> [GHC.Types.Char]\n-> exists [[[GHC.Types.Char]]].GHC.Types.Int"
16:27-16:32::Data.List.words :: "[GHC.Types.Char] -> [[GHC.Types.Char]]"
19:1-19:10::StringBuffer.safeIndex :: "forall a. GHC.Types.Int -> [a] -> (Data.Maybe.Maybe a)"
19:11-19:12::n :: "GHC.Types.Int"
19:17-19:18::n :: "{v : GHC.Types.Int | v == n}"
19:19-19:20::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Bool | Prop v <=> x1 < v}"
19:21-19:22::lq_anf__d1ul :: "{v : GHC.Types.Int | v == (0  :  int)}"
19:25-19:32::Data.Maybe.Nothing :: "forall a. {v : (Data.Maybe.Maybe a) | isJust v <=> false}"
20:25-20:32::Data.Maybe.Nothing :: "forall a. {v : (Data.Maybe.Maybe a) | isJust v <=> false}"
21:25-21:29::_ :: "x1:a\n-> {v : (Data.Maybe.Maybe a) | isJust v <=> true && fromJust v == x1}"
21:30-21:31::x :: "{VV : a | VV == x}"
22:25-22:34::StringBuffer.safeIndex :: "forall a. GHC.Types.Int -> [a] -> (Data.Maybe.Maybe a)"
22:36-22:37::n :: "{v : GHC.Types.Int | v == n}"
22:37-22:38::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
22:38-22:39::lq_anf__d1uw :: "{v : GHC.Types.Int | v == (1  :  int)}"
22:41-22:43::xs :: "{v : [a] | v == xs && len v >= 0}"