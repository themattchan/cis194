(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)
(set-option :smt.mbqi false)
(define-sort SMT_Elt () Int)
(define-sort SMT_Set () (Array SMT_Elt Bool))
(define-fun smt_set_emp () SMT_Set ((as const SMT_Set) false))
(define-fun smt_set_mem ((x SMT_Elt) (s SMT_Set)) Bool (select s x))
(define-fun smt_set_add ((s SMT_Set) (x SMT_Elt)) SMT_Set (store s x true))
(define-fun smt_set_cup ((s1 SMT_Set) (s2 SMT_Set)) SMT_Set ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 SMT_Set) (s2 SMT_Set)) SMT_Set ((_ map and) s1 s2))
(define-fun smt_set_com ((s SMT_Set)) SMT_Set ((_ map not) s))
(define-fun smt_set_dif ((s1 SMT_Set) (s2 SMT_Set)) SMT_Set (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 SMT_Set) (s2 SMT_Set)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(declare-fun z3v62 () Int)
(declare-fun z3v63 () Int)
(assert (distinct z3v62 z3v63))
(declare-fun z3v64 () Int)
(declare-fun z3f65 (Int) Bool)
(declare-fun z3v66 () Int)
(declare-fun z3v67 () Int)
(declare-fun z3v68 () Int)
(declare-fun z3v69 () Int)
(declare-fun z3f70 (Int) Int)
(declare-fun z3v71 () Int)
(declare-fun z3v72 () Int)
(declare-fun z3v73 () Int)
(declare-fun z3f74 (Int) Int)
(declare-fun z3v75 () Int)
(declare-fun z3v76 () Int)
(declare-fun z3v77 () Int)
(push 1)
(assert true)
(assert (= z3v77 z3v71))
(assert (and (not (z3f65 z3v64)) (not (z3f65 z3v64)) (= z3v64 z3v66) (= (z3f65 z3v64) (<  z3v68 z3v67)) (= (z3f65 z3v66) (<  z3v68 z3v67)) (= z3v67 0) (>= (z3f70 z3v69) 0) (= z3v72 z3v71) (z3f65 z3v62) (= (z3f74 z3v73) z3v73) (= (z3f74 z3v75) z3v75) (not (z3f65 z3v63)) (= (z3f74 z3v76) z3v76)))
(push 1)
(assert (not (<  z3v77 z3v71)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v77 z3v71)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v77 z3v71)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v77 z3v71))))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v77 z3v71)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v78 () Int)
(declare-fun z3v79 () Int)
(declare-fun z3v80 () Int)
(declare-fun z3v81 () Int)
(declare-fun z3f82 (Int) Int)
(declare-fun z3f83 (Int) Int)
(declare-fun z3f84 (Int) Bool)
(declare-fun z3f85 (Int Int) Int)
(declare-fun z3v86 () Int)
(declare-fun z3v87 () Int)
(push 1)
(assert true)
(assert (= z3v87 z3v71))
(assert (and (>= (z3f70 z3v79) 0) (>= (z3f70 z3v80) 0) (= (z3f82 z3v80) z3v81) (= (z3f83 z3v80) z3v79) (= (z3f70 z3v80) (+ 1 (z3f70 z3v79))) (= (z3f84 z3v80) false) (= z3v80 (z3f85 z3v81 z3v79)) (>= (z3f70 z3v80) 0) (= z3v80 z3v69) (>= (z3f70 z3v80) 0) (not (z3f65 z3v64)) (not (z3f65 z3v64)) (= z3v64 z3v66) (= (z3f65 z3v64) (<  z3v68 z3v67)) (= (z3f65 z3v66) (<  z3v68 z3v67)) (= z3v67 0) (>= (z3f70 z3v69) 0) (= z3v86 z3v71) (z3f65 z3v62) (= (z3f74 z3v73) z3v73) (= (z3f74 z3v75) z3v75) (not (z3f65 z3v63)) (= (z3f74 z3v76) z3v76)))
(assert (= z3v78 z3v71))
(assert (<= z3v78 z3v71))
(assert (>= z3v78 z3v71))
(push 1)
(assert (not (<  z3v87 z3v78)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v87 z3v71)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= z3v87 z3v78)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v87 z3v78)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v87 z3v71)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v87 z3v78)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v87 z3v71)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v87 z3v78))))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v87 z3v71))))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v87 z3v78)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v87 z3v71)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v88 () Int)
(declare-fun z3v89 () Int)
(declare-fun z3v90 () Int)
(declare-fun z3v91 () Int)
(declare-fun z3v92 () Int)
(declare-fun z3v93 () Int)
(declare-fun z3v94 () Int)
(declare-fun z3v95 () Int)
(declare-fun z3v96 () Int)
(declare-fun z3v97 () Int)
(declare-fun z3v98 () Int)
(push 1)
(assert true)
(assert (= z3v98 z3v91))
(assert (= z3v98 (- z3v68 z3v90)))
(assert (and (>= (z3f70 z3v89) 0) (>= (z3f70 z3v79) 0) (= z3v91 (- z3v68 z3v90)) (= z3v90 1) (>= (z3f70 z3v92) 0) (= (z3f82 z3v92) z3v93) (= (z3f83 z3v92) z3v89) (= (z3f70 z3v92) (+ 1 (z3f70 z3v89))) (= (z3f84 z3v92) false) (= z3v92 (z3f85 z3v93 z3v89)) (>= (z3f70 z3v92) 0) (= z3v92 z3v69) (>= (z3f70 z3v92) 0) (not (= z3v94 0)) (= z3v94 z3v95) (= z3v96 z3v95) (= z3v96 z3v95) (= z3v96 z3v68) (>= (z3f70 z3v80) 0) (= (z3f82 z3v80) z3v81) (= (z3f83 z3v80) z3v79) (= (z3f70 z3v80) (+ 1 (z3f70 z3v79))) (= (z3f84 z3v80) false) (= z3v80 (z3f85 z3v81 z3v79)) (>= (z3f70 z3v80) 0) (= z3v80 z3v69) (>= (z3f70 z3v80) 0) (not (z3f65 z3v64)) (not (z3f65 z3v64)) (= z3v64 z3v66) (= (z3f65 z3v64) (<  z3v68 z3v67)) (= (z3f65 z3v66) (<  z3v68 z3v67)) (= z3v67 0) (>= (z3f70 z3v69) 0) (= z3v97 z3v91) (= z3v97 (- z3v68 z3v90)) (z3f65 z3v62) (= (z3f74 z3v73) z3v73) (= (z3f74 z3v75) z3v75) (not (z3f65 z3v63)) (= (z3f74 z3v76) z3v76)))
(assert (= z3v78 z3v71))
(assert (= z3v88 z3v78))
(assert (= z3v88 z3v71))
(push 1)
(assert (not (and (>= z3v98 0) (<  z3v98 z3v68))))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v99 () Int)
(declare-fun z3v100 () Int)
(declare-fun z3v101 () Int)
(declare-fun z3v102 () Int)
(declare-fun z3f103 () Int)
(declare-fun z3v104 () Int)
(declare-fun z3v105 () Int)
(push 1)
(assert true)
(assert (= z3v105 z3v100))
(assert (= z3v105 (- z3v68 z3v99)))
(assert (and (>= (z3f70 z3v89) 0) (>= (z3f70 z3v79) 0) (= z3v100 (- z3v68 z3v99)) (= z3v99 1) (>= (z3f70 z3v101) 0) (= (z3f82 z3v101) z3v93) (= (z3f83 z3v101) z3v89) (= (z3f70 z3v101) (+ 1 (z3f70 z3v89))) (= (z3f84 z3v101) false) (= z3v101 (z3f85 z3v93 z3v89)) (>= (z3f70 z3v101) 0) (= z3v101 z3v69) (>= (z3f70 z3v101) 0) (>= (z3f70 z3v102) 0) (= (z3f70 z3v102) 0) (= (z3f84 z3v102) true) (= z3v102 z3f103) (>= (z3f70 z3v102) 0) (= z3v102 z3v69) (>= (z3f70 z3v102) 0) (= z3v94 0) (= z3v94 z3v95) (= z3v96 z3v95) (= z3v96 z3v95) (= z3v96 z3v68) (>= (z3f70 z3v80) 0) (= (z3f82 z3v80) z3v81) (= (z3f83 z3v80) z3v79) (= (z3f70 z3v80) (+ 1 (z3f70 z3v79))) (= (z3f84 z3v80) false) (= z3v80 (z3f85 z3v81 z3v79)) (>= (z3f70 z3v80) 0) (= z3v80 z3v69) (>= (z3f70 z3v80) 0) (not (z3f65 z3v64)) (not (z3f65 z3v64)) (= z3v64 z3v66) (= (z3f65 z3v64) (<  z3v68 z3v67)) (= (z3f65 z3v66) (<  z3v68 z3v67)) (= z3v67 0) (>= (z3f70 z3v69) 0) (= z3v104 z3v100) (= z3v104 (- z3v68 z3v99)) (z3f65 z3v62) (= (z3f74 z3v73) z3v73) (= (z3f74 z3v75) z3v75) (not (z3f65 z3v63)) (= (z3f74 z3v76) z3v76)))
(assert (= z3v78 z3v71))
(assert (= z3v88 z3v78))
(assert (= z3v88 z3v71))
(push 1)
(assert (not (and (>= z3v105 0) (<  z3v105 z3v68))))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v106 () Int)
(push 1)
(assert true)
(assert (= z3v106 z3v71))
(assert (and (>= (z3f70 z3v79) 0) (>= (z3f70 z3v80) 0) (= (z3f82 z3v80) z3v81) (= (z3f83 z3v80) z3v79) (= (z3f70 z3v80) (+ 1 (z3f70 z3v79))) (= (z3f84 z3v80) false) (= z3v80 (z3f85 z3v81 z3v79)) (>= (z3f70 z3v80) 0) (= z3v80 z3v69) (>= (z3f70 z3v80) 0) (not (z3f65 z3v64)) (not (z3f65 z3v64)) (= z3v64 z3v66) (= (z3f65 z3v64) (<  z3v68 z3v67)) (= (z3f65 z3v66) (<  z3v68 z3v67)) (= z3v67 0) (>= (z3f70 z3v69) 0) (= z3v86 z3v71) (z3f65 z3v62) (= (z3f74 z3v73) z3v73) (= (z3f74 z3v75) z3v75) (not (z3f65 z3v63)) (= (z3f74 z3v76) z3v76)))
(assert (= z3v78 z3v71))
(push 1)
(assert (not (and (= z3v106 z3v71) (= z3v106 z3v78))))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v107 () Int)
(push 1)
(assert true)
(assert (= z3v107 z3v71))
(assert (and (not (z3f65 z3v64)) (not (z3f65 z3v64)) (= z3v64 z3v66) (= (z3f65 z3v64) (<  z3v68 z3v67)) (= (z3f65 z3v66) (<  z3v68 z3v67)) (= z3v67 0) (>= (z3f70 z3v69) 0) (= z3v72 z3v71) (z3f65 z3v62) (= (z3f74 z3v73) z3v73) (= (z3f74 z3v75) z3v75) (not (z3f65 z3v63)) (= (z3f74 z3v76) z3v76)))
(push 1)
(assert (not (= z3v107 z3v71)))
(check-sat)
(pop 1)
(pop 1)
