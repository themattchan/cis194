7:13-7:15::Sized.$fEqSize :: "(GHC.Classes.Eq Sized.Size)"
7:17-7:20::Sized.$fOrdSize :: "(GHC.Classes.Ord Sized.Size)"
7:22-7:26::Sized.$fShowSize :: "(GHC.Show.Show Sized.Size)"
7:28-7:31::Sized.$fNumSize :: "(GHC.Num.Num Sized.Size)"
10:1-10:8::Sized.getSize :: "Sized.Size -> GHC.Types.Int"
15:10-15:20::Sized.$fSizedSize :: "(Sized.Sized Sized.Size)"
16:3-16:7::$csize :: "x1:Sized.Size -> {v : Sized.Size | v == x1}"
16:10-16:12::_ :: "x1:Sized.Size -> {v : Sized.Size | v == x1}"
23:10-23:32::Sized.$fSized(,) :: "forall a b.\n(Sized.Sized [Contravariant]\n[] b) =>\n(Sized.Sized (a, b))"
24:3-24:7::$csize :: "forall a b.\n(Sized.Sized [Contravariant]\n[] b) =>\n(a, b) -> Sized.Size"
24:10-24:14::lq_anf__d1Er :: "a -> Sized.Size"
24:15-24:16::_ :: "(a -> Sized.Size)\n-> ((b, a) -> a) -> (b, a) -> exists [a].Sized.Size"
24:17-24:20::lq_anf__d1Es :: "(a, b) -> b"
26:10-26:21::Sized.$fMonoidSize :: "(Data.Monoid.Monoid Sized.Size)"
27:3-27:9::$cmempty :: "Sized.Size"
27:13-27:17::_ :: "GHC.Types.Int -> Sized.Size"
27:18-27:19::lq_anf__d1Eu :: "{v : GHC.Types.Int | v == (0  :  int)}"
28:3-28:10::$cmappend :: "x1:Sized.Size -> x2:Sized.Size -> {v : Sized.Size | v == x1 + x2}"
28:13-28:16::_ :: "x1:Sized.Size -> x2:Sized.Size -> {v : Sized.Size | v == x1 + x2}"