13:1-13:7::Example.square :: "forall a. (GHC.Real.Integral [Bivariant]\n[] a) => a -> a"
13:8-13:9::x :: "a"
13:12-13:13::x :: "{VV : a | VV == x}"
13:14-13:15::_ :: "x1:a\n-> x2:a\n-> {VV : a | x1 > 0 && x2 > 0 => VV >= x1 && VV >= x2 && x1 > 1 && x2 > 1 => VV > x1 && VV > x2 && x1 == 0 || x2 == 0 => VV == 0}"
13:16-13:17::x :: "{VV : a | VV == x}"
16:1-16:10::Example.sumtorial :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
17:15-17:16::ds_d2vv :: "GHC.Integer.Type.Integer"
17:17-17:18::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}"
17:19-17:28::Example.sumtorial :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
17:30-17:31::ds_d2vv :: "GHC.Integer.Type.Integer"
17:31-17:32::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 - x2}"
20:1-20:10::Example.hailstone :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
20:11-20:12::n :: "GHC.Integer.Type.Integer"
21:5-21:6::n :: "{v : GHC.Integer.Type.Integer | v == n}"
21:7-21:12::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:{v : GHC.Integer.Type.Integer | v /= 0}\n-> {v : GHC.Integer.Type.Integer | 0 <= x1 && 0 < x2 => 0 <= v && v < x2 && v == x1 mod x2}"
21:15-21:17::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Types.Bool | Prop v <=> x1 == v}"
21:22-21:23::n :: "{v : GHC.Integer.Type.Integer | v == n}"
21:24-21:29::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:{v : GHC.Integer.Type.Integer | v /= 0}\n-> {v : GHC.Integer.Type.Integer | x1 >= 0 && x2 >= 0 => v >= 0 && x1 >= 0 && x2 >= 1 => v <= x1 && v == x1 / x2}"
22:17-22:20::lq_anf__d2B6 :: "GHC.Integer.Type.Integer"
22:18-22:19::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
22:19-22:20::n :: "{v : GHC.Integer.Type.Integer | v == n}"
22:21-22:22::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}"
25:1-25:13::Example.hailstoneSeq :: "GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]"
25:18-25:21::lq_anf__d2Bf :: "{v : [GHC.Integer.Type.Integer] | null v <=> true && len v == 0 && len v >= 0}"
26:18-26:19::ds_d2vs :: "GHC.Integer.Type.Integer"
26:20-26:21::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
26:22-26:34::Example.hailstoneSeq :: "GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]"
26:36-26:45::_ :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
26:46-26:47::ds_d2vs :: "GHC.Integer.Type.Integer"
29:1-29:10::Example.lineCount :: "[GHC.Types.Char] -> GHC.Types.Int"
29:13-29:19::lq_anf__d2x5 :: "x1:[[GHC.Types.Char]] -> {v : GHC.Types.Int | v == len x1}"
29:20-29:21::_ :: "([[GHC.Types.Char]] -> GHC.Types.Int)\n-> ([GHC.Types.Char] -> [[GHC.Types.Char]])\n-> [GHC.Types.Char]\n-> exists [[[GHC.Types.Char]]].GHC.Types.Int"
29:22-29:27::Data.List.lines :: "[GHC.Types.Char] -> [[GHC.Types.Char]]"
32:1-32:10::Example.wordCount :: "[GHC.Types.Char] -> GHC.Types.Int"
32:13-32:19::lq_anf__d2x4 :: "x1:[[GHC.Types.Char]] -> {v : GHC.Types.Int | v == len x1}"
32:20-32:21::_ :: "([[GHC.Types.Char]] -> GHC.Types.Int)\n-> ([GHC.Types.Char] -> [[GHC.Types.Char]])\n-> [GHC.Types.Char]\n-> exists [[[GHC.Types.Char]]].GHC.Types.Int"
32:22-32:27::Data.List.words :: "[GHC.Types.Char] -> [[GHC.Types.Char]]"
35:1-35:7::Example.myDrop :: "forall a. GHC.Types.Int -> [a] -> [a]"
35:15-35:17::GHC.Types.[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x4 VV -> p x4> | null v <=> true && len v == 0}"
37:5-37:6::ds_d2vl :: "GHC.Types.Int"
37:7-37:8::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Bool | Prop v <=> x1 < v}"
37:9-37:10::lq_anf__d2A4 :: "{v : GHC.Types.Int | v == (1  :  int)}"
37:17-37:18::ds_d2vm :: "{v : [a] | len v >= 0}"
38:17-38:23::Example.myDrop :: "forall a. GHC.Types.Int -> [a] -> [a]"
38:25-38:26::ds_d2vl :: "GHC.Types.Int"
38:27-38:28::_ :: "x1:GHC.Types.Int\n-> x2:GHC.Types.Int -> {v : GHC.Types.Int | v == x1 - x2}"
38:29-38:30::lq_anf__d2A7 :: "{v : GHC.Types.Int | v == (1  :  int)}"
38:32-38:34::xs :: "{v : [a] | v == xs && len v >= 0}"
45:1-45:9::Example.toDigits :: "GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]"
45:12-45:15::_ :: "(GHC.Types.Char -> GHC.Integer.Type.Integer)\n-> x3:[GHC.Types.Char]\n-> {v : [GHC.Integer.Type.Integer] | len v == len x3}"
45:17-45:21::lq_anf__d2Ar :: "[GHC.Types.Char] -> GHC.Integer.Type.Integer"
45:22-45:23::_ :: "([GHC.Types.Char] -> GHC.Integer.Type.Integer)\n-> (GHC.Types.Char -> [GHC.Types.Char])\n-> GHC.Types.Char\n-> exists [[GHC.Types.Char]].GHC.Integer.Type.Integer"
45:25-45:26::_ :: "x1:GHC.Types.Char\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
45:26-45:28::_ :: "{v : [GHC.Types.Char] | null v <=> true && len v == 0}"
45:31-45:32::_ :: "([GHC.Types.Char] -> [GHC.Integer.Type.Integer])\n-> (GHC.Integer.Type.Integer -> [GHC.Types.Char])\n-> GHC.Integer.Type.Integer\n-> exists [[GHC.Types.Char]].[GHC.Integer.Type.Integer]"
45:33-45:37::lq_anf__d2Av :: "GHC.Integer.Type.Integer -> [GHC.Types.Char]"
48:1-48:12::Example.toDigitsRev :: "GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]"
48:15-48:22::lq_anf__d2Aw :: "x1:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | len v == len x1}"
48:23-48:24::_ :: "([GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer])\n-> (GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer])\n-> GHC.Integer.Type.Integer\n-> exists [[GHC.Integer.Type.Integer]].[GHC.Integer.Type.Integer]"
48:25-48:33::Example.toDigits :: "GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]"
53:1-53:17::Example.doubleEveryOther :: "[GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]"
53:20-53:27::lq_anf__d2Ax :: "x1:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | len v == len x1}"
53:28-53:29::_ :: "([GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer])\n-> ([GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer])\n-> [GHC.Integer.Type.Integer]\n-> exists [[GHC.Integer.Type.Integer]].[GHC.Integer.Type.Integer]"
53:30-53:37::_ :: "(GHC.Integer.Type.Integer\n -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> x4:[GHC.Integer.Type.Integer]\n-> x5:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | len v <= len x4 && len v <= len x5}"
53:38-53:41::lq_anf__d2Ay :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
53:43-53:48::_ :: "{v : [GHC.Integer.Type.Integer] | len v > 0}\n-> [GHC.Integer.Type.Integer]"
53:49-53:54::lq_anf__d2AD :: "{v : [GHC.Integer.Type.Integer] | null v <=> false && len v >= 0}"
53:56-53:57::_ :: "([GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer])\n-> ([GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer])\n-> [GHC.Integer.Type.Integer]\n-> exists [[GHC.Integer.Type.Integer]].[GHC.Integer.Type.Integer]"
53:58-53:65::lq_anf__d2AG :: "x1:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | len v == len x1}"
58:1-58:12::Example.splitDigits :: "[GHC.Types.Char] -> [GHC.Integer.Type.Integer]"
58:15-58:18::_ :: "(GHC.Types.Char -> GHC.Integer.Type.Integer)\n-> x3:[GHC.Types.Char]\n-> {v : [GHC.Integer.Type.Integer] | len v == len x3}"
58:20-58:32::lq_anf__d2AI :: "x1:GHC.Types.Int -> {v : GHC.Integer.Type.Integer | v == x1}"
58:33-58:34::_ :: "(GHC.Types.Int -> GHC.Integer.Type.Integer)\n-> (GHC.Types.Char -> GHC.Types.Int)\n-> GHC.Types.Char\n-> exists [GHC.Types.Int].GHC.Integer.Type.Integer"
58:36-58:46::Data.Char.digitToInt :: "GHC.Types.Char -> GHC.Types.Int"
61:1-61:13::Example.joinIntegers :: "[GHC.Integer.Type.Integer] -> [GHC.Types.Char]"
61:16-61:22::_ :: "(GHC.Types.Char -> GHC.Types.Bool)\n-> x3:[GHC.Types.Char] -> {v : [GHC.Types.Char] | len v <= len x3}"
61:24-61:26::_ :: "x1:GHC.Types.Char\n-> x2:GHC.Types.Char -> {v : GHC.Types.Bool | Prop v <=> x1 /= v}"
61:27-61:30::_ :: "GHC.Types.Char"
61:32-61:33::_ :: "([GHC.Types.Char] -> [GHC.Types.Char])\n-> ([GHC.Integer.Type.Integer] -> [GHC.Types.Char])\n-> [GHC.Integer.Type.Integer]\n-> exists [[GHC.Types.Char]].[GHC.Types.Char]"
61:34-61:38::lq_anf__d2AM :: "x1:{v : [GHC.Types.Char] | len v > 0}\n-> {v : [GHC.Types.Char] | len v == len x1 - 1}"
61:39-61:40::_ :: "({v : [GHC.Types.Char] | len v >= 0} -> [GHC.Types.Char])\n-> ([GHC.Integer.Type.Integer]\n    -> {v : [GHC.Types.Char] | len v >= 0})\n-> [GHC.Integer.Type.Integer]\n-> exists [{v : [GHC.Types.Char] | len v >= 0}].[GHC.Types.Char]"
61:41-61:45::lq_anf__d2AN :: "x1:{v : [GHC.Types.Char] | len v > 0}\n-> {v : [GHC.Types.Char] | len v == len x1 - 1}"
61:46-61:47::_ :: "(x2:[GHC.Types.Char]\n -> {v : [GHC.Types.Char] | v /= x2 && len v >= 0 && len v < len x2})\n-> ([GHC.Integer.Type.Integer] -> [GHC.Types.Char])\n-> [GHC.Integer.Type.Integer]\n-> exists [z:[GHC.Types.Char]].{v : [GHC.Types.Char] | v /= z && len v >= 0 && len v < len z}"
61:48-61:52::lq_anf__d2AO :: "[GHC.Integer.Type.Integer] -> [GHC.Types.Char]"
64:1-64:10::Example.sumDigits :: "[GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer"
64:13-64:16::lq_anf__d2AR :: "[GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer"
64:17-64:18::_ :: "([GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer)\n-> ([GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer])\n-> [GHC.Integer.Type.Integer]\n-> exists [[GHC.Integer.Type.Integer]].GHC.Integer.Type.Integer"
64:19-64:30::Example.splitDigits :: "[GHC.Types.Char] -> [GHC.Integer.Type.Integer]"
64:31-64:32::_ :: "([GHC.Types.Char] -> [GHC.Integer.Type.Integer])\n-> ([GHC.Integer.Type.Integer] -> [GHC.Types.Char])\n-> [GHC.Integer.Type.Integer]\n-> exists [[GHC.Types.Char]].[GHC.Integer.Type.Integer]"
64:33-64:45::Example.joinIntegers :: "[GHC.Integer.Type.Integer] -> [GHC.Types.Char]"
69:1-69:9::Example.validate :: "GHC.Integer.Type.Integer -> GHC.Types.Bool"
69:13-69:15::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Types.Bool | Prop v <=> x1 == v}"
69:18-69:19::_ :: "(GHC.Integer.Type.Integer -> GHC.Types.Bool)\n-> (GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> GHC.Integer.Type.Integer\n-> exists [GHC.Integer.Type.Integer].GHC.Types.Bool"
69:20-69:24::_ :: "(GHC.Integer.Type.Integer\n -> {v : GHC.Integer.Type.Integer | v > 0}\n -> GHC.Integer.Type.Integer)\n-> {v : GHC.Integer.Type.Integer | v > 0}\n-> GHC.Integer.Type.Integer\n-> GHC.Integer.Type.Integer"
69:25-69:28::lq_anf__d2AU :: "x1:GHC.Integer.Type.Integer\n-> x2:{v : GHC.Integer.Type.Integer | v /= 0}\n-> {v : GHC.Integer.Type.Integer | 0 <= x1 && 0 < x2 => 0 <= v && v < x2 && v == x1 mod x2}"
69:32-69:33::_ :: "(GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> (GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> GHC.Integer.Type.Integer\n-> exists [GHC.Integer.Type.Integer].GHC.Integer.Type.Integer"
69:34-69:43::Example.sumDigits :: "[GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer"
69:44-69:45::_ :: "([GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer)\n-> (GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer])\n-> GHC.Integer.Type.Integer\n-> exists [[GHC.Integer.Type.Integer]].GHC.Integer.Type.Integer"
69:46-69:62::Example.doubleEveryOther :: "[GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]"
69:63-69:64::_ :: "([GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer])\n-> (GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer])\n-> GHC.Integer.Type.Integer\n-> exists [[GHC.Integer.Type.Integer]].[GHC.Integer.Type.Integer]"
69:65-69:73::Example.toDigits :: "GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]"
76:1-76:6::Example.hanoi :: "GHC.Integer.Type.Integer\n-> [GHC.Types.Char]\n-> [GHC.Types.Char]\n-> [GHC.Types.Char]\n-> [([GHC.Types.Char], [GHC.Types.Char])]"
76:9-76:10::a :: "[GHC.Types.Char]"
76:11-76:12::b :: "[GHC.Types.Char]"
76:13-76:14::c :: "[GHC.Types.Char]"
76:17-76:25::lq_anf__d2By :: "{v : [([GHC.Types.Char], [GHC.Types.Char])] | null v <=> true && len v == 0 && len v >= 0}"
76:18-76:24::lq_anf__d2Bx :: "{v : ([GHC.Types.Char], [GHC.Types.Char]) | fst v == a && x_Tuple22 v == b && snd v == b && x_Tuple21 v == a}"
76:19-76:20::a :: "{v : [GHC.Types.Char] | v == a && len v >= 0}"
76:22-76:23::b :: "{v : [GHC.Types.Char] | v == b && len v >= 0}"
77:17-77:22::Example.hanoi :: "GHC.Integer.Type.Integer\n-> [GHC.Types.Char]\n-> [GHC.Types.Char]\n-> [GHC.Types.Char]\n-> [([GHC.Types.Char], [GHC.Types.Char])]"
77:24-77:28::_ :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
77:29-77:30::ds_d2vc :: "GHC.Integer.Type.Integer"
77:32-77:33::a :: "{v : [GHC.Types.Char] | v == a && len v >= 0}"
77:34-77:35::c :: "{v : [GHC.Types.Char] | v == c && len v >= 0}"
77:36-77:37::b :: "{v : [GHC.Types.Char] | v == b && len v >= 0}"
77:38-77:40::_ :: "x1:[([GHC.Types.Char], [GHC.Types.Char])]\n-> x2:[([GHC.Types.Char], [GHC.Types.Char])]\n-> {v : [([GHC.Types.Char], [GHC.Types.Char])] | len v == len x1 + len v}"
77:41-77:49::lq_anf__d2Bt :: "{v : [([GHC.Types.Char], [GHC.Types.Char])] | null v <=> false && len v >= 0}"
77:42-77:48::lq_anf__d2Br :: "{v : ([GHC.Types.Char], [GHC.Types.Char]) | fst v == a && x_Tuple22 v == b && snd v == b && x_Tuple21 v == a}"
77:43-77:44::a :: "{v : [GHC.Types.Char] | v == a && len v >= 0}"
77:46-77:47::b :: "{v : [GHC.Types.Char] | v == b && len v >= 0}"
77:50-77:52::_ :: "x1:[([GHC.Types.Char], [GHC.Types.Char])]\n-> x2:[([GHC.Types.Char], [GHC.Types.Char])]\n-> {v : [([GHC.Types.Char], [GHC.Types.Char])] | len v == len x1 + len v}"
77:53-77:58::Example.hanoi :: "GHC.Integer.Type.Integer\n-> [GHC.Types.Char]\n-> [GHC.Types.Char]\n-> [GHC.Types.Char]\n-> [([GHC.Types.Char], [GHC.Types.Char])]"
77:60-77:64::_ :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
77:65-77:66::ds_d2vc :: "GHC.Integer.Type.Integer"
77:68-77:69::c :: "{v : [GHC.Types.Char] | v == c && len v >= 0}"
77:70-77:71::b :: "{v : [GHC.Types.Char] | v == b && len v >= 0}"
77:72-77:73::a :: "{v : [GHC.Types.Char] | v == a && len v >= 0}"
83:27-83:31::Example.$fShowBookInfo :: "(GHC.Show.Show Example.BookInfo)"
86:31-86:35::Example.$fShowMagazineInfo :: "(GHC.Show.Show Example.MagazineInfo)"
88:1-88:7::Example.myInfo :: "Example.BookInfo"
88:10-88:14::_ :: "GHC.Types.Int\n-> [GHC.Types.Char] -> [[GHC.Types.Char]] -> Example.BookInfo"
88:15-88:28::lq_anf__d2wX :: "{v : GHC.Types.Int | v == (9780135072455  :  int)}"
88:29-88:53::lq_anf__d2wY :: "{v : [GHC.Types.Char] | len v >= 0}"
89:10-89:42::lq_anf__d2x3 :: "{v : [[GHC.Types.Char]] | null v <=> false && len v >= 0}"
89:11-89:25::lq_anf__d2wZ :: "{v : [GHC.Types.Char] | len v >= 0}"
89:27-89:41::lq_anf__d2x0 :: "{v : [GHC.Types.Char] | len v >= 0}"
113:32-113:36::Example.$fShowBillingInfo :: "(GHC.Show.Show Example.BillingInfo)"
119:30-119:32::Example.$fEqCartesian2D :: "(GHC.Classes.Eq Example.Cartesian2D)"
119:34-119:38::Example.$fShowCartesian2D :: "(GHC.Show.Show Example.Cartesian2D)"
123:26-123:28::Example.$fEqPolar2D :: "(GHC.Classes.Eq Example.Polar2D)"
123:30-123:34::Example.$fShowPolar2D :: "(GHC.Show.Show Example.Polar2D)"
127:3-127:13::Example.customerID :: "Example.Customer -> GHC.Types.Int"
128:3-128:15::Example.customerName :: "Example.Customer -> [GHC.Types.Char]"
129:3-129:18::Example.customerAddress :: "Example.Customer -> [[GHC.Types.Char]]"
130:15-130:19::Example.$fShowCustomer :: "(GHC.Show.Show Example.Customer)"
132:1-132:10::Example.customer1 :: "Example.Customer"
132:13-132:21::_ :: "GHC.Types.Int\n-> [GHC.Types.Char] -> [[GHC.Types.Char]] -> Example.Customer"
132:22-132:28::lq_anf__d2wO :: "{v : GHC.Types.Int | v == (271828  :  int)}"
132:29-132:42::lq_anf__d2wP :: "{v : [GHC.Types.Char] | len v >= 0}"
133:14-133:29::lq_anf__d2wQ :: "{v : [GHC.Types.Char] | len v >= 0}"
134:14-134:34::lq_anf__d2wR :: "{v : [GHC.Types.Char] | len v >= 0}"
135:14-135:19::lq_anf__d2wS :: "{v : [GHC.Types.Char] | len v >= 0}"
137:1-137:10::Example.customer2 :: "Example.Customer"
138:21-138:27::lq_anf__d2wF :: "{v : GHC.Types.Int | v == (271828  :  int)}"
139:22-139:42::lq_anf__d2wH :: "{v : [GHC.Types.Char] | len v >= 0}"
140:22-140:42::lq_anf__d2wI :: "{v : [GHC.Types.Char] | len v >= 0}"
141:22-141:27::lq_anf__d2wJ :: "{v : [GHC.Types.Char] | len v >= 0}"
142:21-142:38::lq_anf__d2wG :: "{v : [GHC.Types.Char] | len v >= 0}"
165:25-165:29::Example.$fShowList :: "forall a.\n(GHC.Show.Show [Contravariant]\n[] a) =>\n(GHC.Show.Show (Example.List a))"
169:1-169:9::Example.fromList :: "forall a. [a] -> (Example.List a)"
169:19-169:23::_ :: "a -> (Example.List a) -> (Example.List a)"
169:24-169:25::x :: "{VV : a | VV == x}"
169:27-169:35::Example.fromList :: "forall a. [a] -> (Example.List a)"
169:36-169:38::xs :: "{v : [a] | v == xs && len v >= 0}"
170:19-170:22::Example.Nil :: "forall a. (Example.List a)"
172:1-172:7::Example.toList :: "forall a. (Example.List a) -> [a]"
172:22-172:23::x :: "{VV : a | VV == x}"
172:24-172:25::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
172:26-172:32::Example.toList :: "forall a. (Example.List a) -> [a]"
172:33-172:35::xs :: "{v : (Example.List a) | v == xs}"
173:14-173:16::GHC.Types.[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x4 VV -> p x4> | null v <=> true && len v == 0}"
177:25-177:29::Example.$fShowTree :: "forall a.\n(GHC.Show.Show [Contravariant]\n[] a) =>\n(GHC.Show.Show (Example.Tree a))"
178:1-178:10::Example.firstTree :: "(Example.Tree [GHC.Types.Char])"
178:13-178:17::_ :: "[GHC.Types.Char]\n-> (Example.Tree [GHC.Types.Char])\n-> (Example.Tree [GHC.Types.Char])\n-> (Example.Tree [GHC.Types.Char])"
178:18-178:26::lq_anf__d2wv :: "{v : [GHC.Types.Char] | len v >= 0}"
178:27-178:32::lq_anf__d2ww :: "(Example.Tree [GHC.Types.Char])"
178:34-178:38::_ :: "[GHC.Types.Char]\n-> (Example.Tree [GHC.Types.Char])\n-> (Example.Tree [GHC.Types.Char])\n-> (Example.Tree [GHC.Types.Char])"
178:39-178:52::lq_anf__d2wx :: "{v : [GHC.Types.Char] | len v >= 0}"
178:53-178:58::lq_anf__d2wy :: "(Example.Tree [GHC.Types.Char])"
178:59-178:64::lq_anf__d2wz :: "(Example.Tree [GHC.Types.Char])"
182:23-182:27::Example.$fShowNewTree :: "forall a.\n(GHC.Show.Show [Contravariant]\n[] a) =>\n(GHC.Show.Show (Example.NewTree a))"
183:1-183:11::Example.simpleTree :: "(Example.NewTree [GHC.Types.Char])"
183:14-183:21::_ :: "[GHC.Types.Char]\n-> (Data.Maybe.Maybe (Example.NewTree [GHC.Types.Char]))\n-> (Data.Maybe.Maybe (Example.NewTree [GHC.Types.Char]))\n-> (Example.NewTree [GHC.Types.Char])"
183:22-183:30::lq_anf__d2wo :: "{v : [GHC.Types.Char] | len v >= 0}"
183:31-183:38::lq_anf__d2wp :: "{v : (Data.Maybe.Maybe (Example.NewTree [GHC.Types.Char])) | isJust v <=> false}"
183:40-183:44::_ :: "x1:(Example.NewTree [GHC.Types.Char])\n-> {v : (Data.Maybe.Maybe (Example.NewTree [GHC.Types.Char])) | isJust v <=> true && fromJust v == x1}"
183:46-183:53::_ :: "[GHC.Types.Char]\n-> (Data.Maybe.Maybe (Example.NewTree [GHC.Types.Char]))\n-> (Data.Maybe.Maybe (Example.NewTree [GHC.Types.Char]))\n-> (Example.NewTree [GHC.Types.Char])"
183:54-183:61::lq_anf__d2wq :: "{v : [GHC.Types.Char] | len v >= 0}"
183:62-183:69::lq_anf__d2wr :: "{v : (Data.Maybe.Maybe (Example.NewTree [GHC.Types.Char])) | isJust v <=> false}"
183:70-183:77::lq_anf__d2ws :: "{v : (Data.Maybe.Maybe (Example.NewTree [GHC.Types.Char])) | isJust v <=> false}"
188:1-188:9::Example.mySecond :: "forall a. [a] -> a"
188:10-188:12::xs :: "[a]"
188:18-188:22::_ :: "x1:[a] -> {v : GHC.Types.Bool | Prop v <=> len x1 == 0}"
188:24-188:28::_ :: "x1:{v : [a] | len v > 0} -> {v : [a] | len v == len x1 - 1}"
188:29-188:31::xs :: "{v : [a] | v == xs && len v >= 0}"
189:20-189:25::_ :: "[GHC.Types.Char] -> a"
189:26-189:42::lq_anf__d2wn :: "{v : [GHC.Types.Char] | len v >= 0}"
190:20-190:24::_ :: "{v : [a] | len v > 0} -> a"
190:26-190:30::_ :: "x1:{v : [a] | len v > 0} -> {v : [a] | len v == len x1 - 1}"
190:31-190:33::xs :: "{v : [a] | v == xs && len v >= 0}"
193:1-193:11::Example.safeSecond :: "forall a. [a] -> (Data.Maybe.Maybe a)"
193:17-193:24::Data.Maybe.Nothing :: "forall a. {v : (Data.Maybe.Maybe a) | isJust v <=> false}"
194:20-194:24::_ :: "x1:[a] -> {v : GHC.Types.Bool | Prop v <=> len x1 == 0}"
194:26-194:30::_ :: "x1:{v : [a] | len v > 0} -> {v : [a] | len v == len x1 - 1}"
194:31-194:33::ds_d2v7 :: "{v : [a] | len v >= 0}"
195:22-195:29::Data.Maybe.Nothing :: "forall a. {v : (Data.Maybe.Maybe a) | isJust v <=> false}"
196:22-196:26::_ :: "x1:a\n-> {v : (Data.Maybe.Maybe a) | isJust v <=> true && fromJust v == x1}"
196:28-196:32::_ :: "{v : [a] | len v > 0} -> a"
196:34-196:38::_ :: "x1:{v : [a] | len v > 0} -> {v : [a] | len v == len x1 - 1}"
196:39-196:41::ds_d2v7 :: "{v : [a] | len v >= 0}"
199:1-199:11::Example.tidySecond :: "forall a. [a] -> (Data.Maybe.Maybe a)"
199:22-199:26::_ :: "x1:a\n-> {v : (Data.Maybe.Maybe a) | isJust v <=> true && fromJust v == x1}"
199:27-199:28::x :: "{VV : a | VV == x}"
200:22-200:29::Data.Maybe.Nothing :: "forall a. {v : (Data.Maybe.Maybe a) | isJust v <=> false}"
203:1-203:6::Example.lend3 :: "forall a.\n(GHC.Classes.Ord [Bivariant]\n[] a, GHC.Real.Fractional [Bivariant]\n[] a) =>\na -> a -> (Data.Maybe.Maybe a)"
203:7-203:13::amount :: "a"
203:14-203:21::balance :: "a"
204:5-204:11::amount :: "{VV : a | VV == amount}"
204:12-204:14::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | Prop v <=> x1 <= v}"
204:15-204:16::lq_anf__d2vZ :: "a"
204:31-204:38::Data.Maybe.Nothing :: "forall a. {v : (Data.Maybe.Maybe a) | isJust v <=> false}"
205:5-205:11::amount :: "{VV : a | VV == amount}"
205:12-205:13::_ :: "x1:a -> x2:a -> {v : GHC.Types.Bool | Prop v <=> x1 > v}"
205:14-205:21::reserve :: "{VV : a | VV == reserve}"
205:23-205:24::_ :: "x1:a\n-> x2:a\n-> {VV : a | x1 > 0 && x2 > 0 => VV >= x1 && VV >= x2 && x1 > 1 && x2 > 1 => VV > x1 && VV > x2 && x1 == 0 || x2 == 0 => VV == 0}"
205:25-205:28::lq_anf__d2w5 :: "a"
205:31-205:38::Data.Maybe.Nothing :: "forall a. {v : (Data.Maybe.Maybe a) | isJust v <=> false}"
206:31-206:35::_ :: "x1:a\n-> {v : (Data.Maybe.Maybe a) | isJust v <=> true && fromJust v == x1}"
206:36-206:46::newBalance :: "{VV : a | VV == newBalance && VV == balance - amount}"
207:9-207:16::reserve :: "a"
207:22-207:25::_ :: "a"
208:9-208:19::newBalance :: "{VV : a | VV == balance - amount}"
208:22-208:29::balance :: "{VV : a | VV == balance}"
208:30-208:31::_ :: "x1:a -> x2:a -> {VV : a | VV == x1 - x2}"
208:32-208:38::amount :: "{VV : a | VV == amount}"