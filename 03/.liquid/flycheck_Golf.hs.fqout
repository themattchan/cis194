UNSAT [509,385,324,198] 
 
 
 
solution: k_1019 := [] 

solution: k_1029 := [] 

solution: k_1090 := [] 

solution: k_1095 := [] 

solution: k_1105 := [] 

solution: k_1261 := [] 

solution: k_1271 := [] 

solution: k_1301 := [] 

solution: k_1311 := [] 

solution: k_1328 := [((len([VV#1327]) = len([ids#a1kP])), CmpLen2(VV#1327, ids#a1kP));((len([VV#1327]) <= len([lq_anf__d1p2])), CmpLen3(VV#1327, lq_anf__d1p2));((len([VV#1327]) <= len([xs#a1kN])), CmpLen3(VV#1327, xs#a1kN));((VV#1327 = ids#a1kP), Cmp7(VV#1327, ids#a1kP));((len([VV#1327]) >= 0), ListZ1(VV#1327))] 

solution: k_1366 := [] 

solution: k_1376 := [] 

solution: k_1387 := [] 

solution: k_1397 := [] 

solution: k_1414 := [((len([VV#1413]) <= len([lq_anf__d1pg])), CmpLen3(VV#1413, lq_anf__d1pg));((VV#1413 = ids#a1kP), Cmp7(VV#1413, ids#a1kP));((len([VV#1413]) = len([ids#a1kP])), CmpLen2(VV#1413, ids#a1kP));((len([VV#1413]) <= len([lq_anf__d1p2])), CmpLen3(VV#1413, lq_anf__d1p2));((len([VV#1413]) <= len([xs#a1kN])), CmpLen3(VV#1413, xs#a1kN));((len([VV#1413]) >= 0), ListZ1(VV#1413))] 

solution: k_1691 := [] 

solution: k_1774 := [] 

solution: k_1865 := [] 

solution: k_1879 := [] 

solution: k_1893 := [] 

solution: k_1913 := [] 

solution: k_1927 := [] 

solution: k_1939 := [] 

solution: k_1953 := [] 

solution: k_2003 := [] 

solution: k_2017 := [] 

solution: k_2079 := [] 

solution: k_2093 := [] 

solution: k_2107 := [] 

solution: k_2370 := [((len([VV#2369]) = len([xs#a1kS])), CmpLen2(VV#2369, xs#a1kS));((len([VV#2369]) >= 0), ListZ1(VV#2369))] 

solution: k_2380 := [(false, BOT())] 

solution: k_2394 := [(false, BOT())] 

solution: k_2404 := [((len([VV#2403]) <= len([xs#a1kS])), CmpLen3(VV#2403, xs#a1kS));((len([VV#2403]) >= 0), ListZ1(VV#2403))] 

solution: k_2414 := [(false, BOT())] 

solution: k_2428 := [(false, BOT())] 

solution: k_2475 := [(false, BOT())] 

solution: k_2487 := [(false, BOT())] 

solution: k_2524 := [(false, BOT())] 

solution: k_2562 := [(false, BOT())] 

solution: k_2614 := [(false, BOT())] 

solution: k_2679 := [(false, BOT())] 

solution: k_2706 := [(false, BOT())] 

solution: k_2720 := [(false, BOT())] 

solution: k_2740 := [(false, BOT())] 

solution: k_2754 := [(false, BOT())] 

solution: k_2774 := [(false, BOT())] 

solution: k_2788 := [(false, BOT())] 

solution: k_2808 := [(false, BOT())] 

solution: k_2822 := [(false, BOT())] 

solution: k_2834 := [(false, BOT())] 

solution: k_2848 := [(false, BOT())] 

solution: k_2916 := [(false, BOT())] 

solution: k_2930 := [(false, BOT())] 

solution: k_2964 := [(false, BOT())] 

solution: k_2978 := [(false, BOT())] 

solution: k_2998 := [(false, BOT())] 

solution: k_3012 := [(false, BOT())] 

solution: k_3115 := [(false, BOT())] 

solution: k_3129 := [(false, BOT())] 

solution: k_789 := [] 

solution: k_804 := [] 

solution: k_814 := [] 

solution: k_838 := [((len([VV#837]) >= 0), ListZ1(VV#837))] 

solution: k_841 := [] 

solution: k_846 := [] 

solution: k_856 := [] 

solution: k_911 := [] 

solution: k_915 := [((VV#914 = n#a1kR), Cmp2(VV#914, n#a1kR));((VV#914 = n#a1kR), Cmp7(VV#914, n#a1kR))] 

solution: k_936 := [] 

solution: k_955 := [] 

solution: k_963 := [] 

solution: k_973 := [] 

solution: k_979 := [] 

//QUALIFIERS 

qualif Bot(v:@(0)):(0 = 1)

qualif Bot0(v:obj):(0 = 1)
qualif Bot1(v:bool):(0 = 1)

qualif Bot2(v:int):(0 = 1)
qualif Cmp(v:int, ~A:int):(v > ~A)

qualif Cmp0(v:@(0), ~A:@(0)):(v < ~A)
qualif Cmp1(v:@(0), ~A:@(0)):(v > ~A)

qualif Cmp10(v:int, ~A:int):(v != ~A)
qualif Cmp2(v:int, ~A:int):(v = ~A)

qualif Cmp3(v:@(0), ~A:@(0)):(v != ~A)
qualif Cmp4(v:int, ~A:int):(v >= ~A)

qualif Cmp5(v:@(0), ~A:@(0)):(v >= ~A)

qualif Cmp6(v:@(0), ~A:@(0)):(v <= ~A)
qualif Cmp7(v:@(0), ~A:@(0)):(v = ~A)

qualif Cmp8(v:int, ~A:int):(v <= ~A)
qualif Cmp9(v:int, ~A:int):(v < ~A)

qualif CmpLen(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) < len([~A]))

qualif CmpLen0(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) >= len([~A]))

qualif CmpLen1(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) > len([~A]))

qualif CmpLen2(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) = len([~A]))

qualif CmpLen3(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) <= len([~A]))

qualif CmpZ(v:@(0)):(v != 0)
qualif CmpZ0(v:@(0)):(v > 0)

qualif CmpZ1(v:@(0)):(v < 0)
qualif CmpZ2(v:@(0)):(v >= 0)

qualif CmpZ3(v:@(0)):(v <= 0)
qualif CmpZ4(v:@(0)):(v = 0)

qualif EqLen(v:int, ~A:FAppTy (List ) @(0)):(v = len([~A]))

qualif False(v:bool):(~ ((Bexp v)))

qualif False1(v:GHC.Types.Bool ):(~ (Prop(v)))

qualif IsEmp(v:GHC.Types.Bool , ~A:FAppTy (List ) @(0)):(Prop(v) <=> (len([~A]) > 0))

qualif IsEmp0(v:GHC.Types.Bool , ~A:FAppTy (List ) @(0)):(Prop(v) <=> (len([~A]) = 0))

qualif LenAcc(v:int, ~A:FAppTy (List ) @(0), ~B:int):(v = (len([~A]) + ~B))

qualif LenDiff(v:FAppTy (List ) @(0), ~A:int):(len([v]) = (~A - 1))

qualif LenDiff0(v:FAppTy (List ) @(0), ~A:int):(len([v]) = (~A + 1))

qualif LenEq(v:FAppTy (List ) @(0), ~A:int):(~A = len([v]))

qualif ListZ(v:FAppTy (List ) @(0)):(len([v]) = 0)

qualif ListZ0(v:FAppTy (List ) @(0)):(len([v]) > 0)

qualif ListZ1(v:FAppTy (List ) @(0)):(len([v]) >= 0)

qualif One(v:int):(v = 1)

qualif Papp(v:@(0), ~P:FAppTy (Pred ) @(0)):papp1(~P, v)

qualif Papp2(v:@(0), ~X:@(1), ~P:FAppTy (FAppTy (Pred ) @(0)) @(1)):papp2(~P, v, ~X)

qualif Papp3(v:@(0), ~X:@(1), ~Y:@(2), ~P:FAppTy (FAppTy (FAppTy (Pred ) @(0)) @(1)) @(2)):papp3(~P, v, ~X, ~Y)

qualif True(v:bool):(Bexp v)

qualif True1(v:GHC.Types.Bool ):Prop(v) 

