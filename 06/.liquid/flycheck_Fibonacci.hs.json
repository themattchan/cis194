{"status":"unsafe","types":{"51":{"1":{"ann":"(Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"Fibonacci.ruler","row":51,"col":1},"9":{"ann":"GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"_","row":51,"col":9}},"37":{"51":{"ann":"a -> a","ident":"_","row":37,"col":51},"48":{"ann":"a -> a","ident":"f","row":37,"col":48},"31":{"ann":"((Fibonacci.Stream a) -> (Fibonacci.Stream a))\n-> (Fibonacci.Stream a) -> (Fibonacci.Stream a)","ident":"_","row":37,"col":31},"22":{"ann":"a -> (Fibonacci.Stream a) -> (Fibonacci.Stream a)","ident":"_","row":37,"col":22},"29":{"ann":"{VV : a | VV == s}","ident":"s","row":37,"col":29},"53":{"ann":"{VV : a | VV == s}","ident":"s","row":37,"col":53},"1":{"ann":"forall a. (a -> a) -> a -> (Fibonacci.Stream a)","ident":"Fibonacci.streamFromSeed","row":37,"col":1},"18":{"ann":"a","ident":"s","row":37,"col":18},"16":{"ann":"a -> a","ident":"f","row":37,"col":16},"33":{"ann":"forall a. (a -> a) -> a -> (Fibonacci.Stream a)","ident":"Fibonacci.streamFromSeed","row":37,"col":33}},"48":{"51":{"ann":"forall a.\n(Fibonacci.Stream a)\n-> (Fibonacci.Stream a) -> (Fibonacci.Stream a)","ident":"Fibonacci.interleaveStreams","row":48,"col":51},"49":{"ann":"((Fibonacci.Stream a) -> (Fibonacci.Stream a))\n-> (Fibonacci.Stream a) -> (Fibonacci.Stream a)","ident":"_","row":48,"col":49},"72":{"ann":"{v : (Fibonacci.Stream a) | v == s1}","ident":"s1","row":48,"col":72},"1":{"ann":"forall a.\n(Fibonacci.Stream a)\n-> (Fibonacci.Stream a) -> (Fibonacci.Stream a)","ident":"Fibonacci.interleaveStreams","row":48,"col":1},"34":{"ann":"(Fibonacci.Stream a)","ident":"s2","row":48,"col":34},"69":{"ann":"{v : (Fibonacci.Stream a) | v == s2}","ident":"s2","row":48,"col":69},"39":{"ann":"a -> (Fibonacci.Stream a) -> (Fibonacci.Stream a)","ident":"_","row":48,"col":39},"46":{"ann":"{VV : a | VV == e1}","ident":"e1","row":48,"col":46}},"61":{"31":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + v}","ident":"lq_anf__d1PS","row":61,"col":31},"17":{"ann":"forall a b c.\n(a -> b -> c)\n-> (Fibonacci.Stream a)\n-> (Fibonacci.Stream b)\n-> (Fibonacci.Stream c)","ident":"Fibonacci.streamZipWith","row":61,"col":17},"3":{"ann":"(Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"$c+","row":61,"col":3}},"96":{"15":{"ann":"{v : GHC.Integer.Type.Integer | v == e}","ident":"e","row":96,"col":15},"37":{"ann":"{v : GHC.Integer.Type.Integer | v == g}","ident":"g","row":96,"col":37},"25":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}","ident":"_","row":96,"col":25},"43":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}","ident":"_","row":96,"col":43},"28":{"ann":"{v : GHC.Integer.Type.Integer | v == h}","ident":"h","row":96,"col":28},"13":{"ann":"{v : GHC.Integer.Type.Integer | v == a}","ident":"a","row":96,"col":13},"31":{"ann":"{v : GHC.Integer.Type.Integer | v == c}","ident":"c","row":96,"col":31},"14":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":96,"col":14},"36":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":96,"col":36},"22":{"ann":"{v : GHC.Integer.Type.Integer | v == a}","ident":"a","row":96,"col":22},"19":{"ann":"{v : GHC.Integer.Type.Integer | v == g}","ident":"g","row":96,"col":19},"44":{"ann":"{v : GHC.Integer.Type.Integer | v == d}","ident":"d","row":96,"col":44},"12":{"ann":"(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)","ident":"lq_anf__d1PO","row":96,"col":12},"17":{"ann":"{v : GHC.Integer.Type.Integer | v == b}","ident":"b","row":96,"col":17},"35":{"ann":"{v : GHC.Integer.Type.Integer | v == d}","ident":"d","row":96,"col":35},"45":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":96,"col":45},"23":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":96,"col":23},"18":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":96,"col":18},"40":{"ann":"{v : GHC.Integer.Type.Integer | v == c}","ident":"c","row":96,"col":40},"26":{"ann":"{v : GHC.Integer.Type.Integer | v == b}","ident":"b","row":96,"col":26},"16":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}","ident":"_","row":96,"col":16},"34":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}","ident":"_","row":96,"col":34},"46":{"ann":"{v : GHC.Integer.Type.Integer | v == h}","ident":"h","row":96,"col":46},"5":{"ann":"(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix","ident":"_","row":96,"col":5},"27":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":96,"col":27},"41":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":96,"col":41},"33":{"ann":"{v : GHC.Integer.Type.Integer | v == e}","ident":"e","row":96,"col":33},"24":{"ann":"{v : GHC.Integer.Type.Integer | v == f}","ident":"f","row":96,"col":24},"42":{"ann":"{v : GHC.Integer.Type.Integer | v == f}","ident":"f","row":96,"col":42},"32":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":96,"col":32}},"78":{"37":{"ann":"a -> b","ident":"_","row":78,"col":37},"31":{"ann":"forall a\n       b\n       c\n       d <p4 :: c-> b-> a d -> Prop, p3 :: b-> a c -> Prop, p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> x3:{VV : c<p3 x2 x1> | true}\n-> x4:{VV : d<p4 x3 x2 x1> | true}\n-> {v : (a, b, c, d)<\\x6 VV -> p2 x6, \\x7 x8 VV -> p3 x7 x8, \\x9 x10 x11 VV -> p4 x9 x10 x11> | x_Tuple44 v == x4 && x_Tuple41 v == x1 && x_Tuple43 v == x3 && x_Tuple42 v == x2}","ident":"GHC.Tuple.(,,,)","row":78,"col":31},"49":{"ann":"{VV : a | VV == d}","ident":"d","row":78,"col":49},"44":{"ann":"{VV : a | VV == c}","ident":"c","row":78,"col":44},"1":{"ann":"forall a b. (a -> b) -> (a, a, a, a) -> (b, b, b, b)","ident":"Fibonacci.mapTup4","row":78,"col":1},"34":{"ann":"{VV : a | VV == a}","ident":"a","row":78,"col":34},"39":{"ann":"{VV : a | VV == b}","ident":"b","row":78,"col":39},"47":{"ann":"a -> b","ident":"_","row":78,"col":47},"42":{"ann":"a -> b","ident":"_","row":78,"col":42},"9":{"ann":"a -> b","ident":"f","row":78,"col":9},"32":{"ann":"a -> b","ident":"_","row":78,"col":32}},"75":{"26":{"ann":"(GHC.Show.Show Fibonacci.Matrix)","ident":"Fibonacci.$fShowMatrix","row":75,"col":26},"32":{"ann":"(GHC.Classes.Eq Fibonacci.Matrix)","ident":"Fibonacci.$fEqMatrix","row":75,"col":32}},"31":{"25":{"ann":"{VV : a | VV == e}","ident":"e","row":31,"col":25},"28":{"ann":"forall a. a -> (Fibonacci.Stream a)","ident":"Fibonacci.streamRepeat","row":31,"col":28},"14":{"ann":"a","ident":"e","row":31,"col":14},"1":{"ann":"forall a. a -> (Fibonacci.Stream a)","ident":"Fibonacci.streamRepeat","row":31,"col":1},"18":{"ann":"a -> (Fibonacci.Stream a) -> (Fibonacci.Stream a)","ident":"_","row":31,"col":18},"41":{"ann":"{VV : a | VV == e}","ident":"e","row":31,"col":41}},"14":{"13":{"ann":"GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer","ident":"Fibonacci.fib","row":14,"col":13},"17":{"ann":"{v : [GHC.Integer.Type.Integer] | len v >= 0}","ident":"lq_anf__d1Qw","row":14,"col":17},"1":{"ann":"[GHC.Integer.Type.Integer]","ident":"Fibonacci.fibs1","row":14,"col":1},"9":{"ann":"(GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> x3:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | len v == len x3}","ident":"_","row":14,"col":9}},"66":{"10":{"ann":"(GHC.Real.Fractional (Fibonacci.Stream GHC.Integer.Type.Integer))","ident":"Fibonacci.$fFractionalStream","row":66,"col":10}},"88":{"10":{"ann":"(GHC.Num.Num Fibonacci.Matrix)","ident":"Fibonacci.$fNumMatrix","row":88,"col":10}},"56":{"25":{"ann":"((Fibonacci.Stream GHC.Integer.Type.Integer)\n -> (Fibonacci.Stream GHC.Integer.Type.Integer))\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"_","row":56,"col":25},"14":{"ann":"((Fibonacci.Stream GHC.Integer.Type.Integer)\n -> (Fibonacci.Stream GHC.Integer.Type.Integer))\n-> ((Fibonacci.Stream GHC.Integer.Type.Integer)\n    -> (Fibonacci.Stream GHC.Integer.Type.Integer))\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> exists [(Fibonacci.Stream GHC.Integer.Type.Integer)].(Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"_","row":56,"col":14},"1":{"ann":"(Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"Fibonacci.x","row":56,"col":1},"16":{"ann":"GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"_","row":56,"col":16},"5":{"ann":"GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"_","row":56,"col":5},"27":{"ann":"forall a. a -> (Fibonacci.Stream a)","ident":"Fibonacci.streamRepeat","row":56,"col":27}},"71":{"14":{"ann":"(Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"lq_anf__d1Qb","row":71,"col":14},"22":{"ann":"{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == Fibonacci.x}","ident":"Fibonacci.x","row":71,"col":22},"1":{"ann":"(Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"Fibonacci.fibs3","row":71,"col":1},"23":{"ann":"(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))","ident":"Fibonacci.$fNumStream","row":71,"col":23},"18":{"ann":"{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == Fibonacci.x}","ident":"Fibonacci.x","row":71,"col":18},"16":{"ann":"(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))","ident":"Fibonacci.$fNumStream","row":71,"col":16},"20":{"ann":"(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))","ident":"Fibonacci.$fNumStream","row":71,"col":20},"11":{"ann":"(GHC.Real.Fractional (Fibonacci.Stream GHC.Integer.Type.Integer))","ident":"Fibonacci.$fFractionalStream","row":71,"col":11},"9":{"ann":"{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == Fibonacci.x}","ident":"Fibonacci.x","row":71,"col":9}},"68":{"15":{"ann":"GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"_","row":68,"col":15},"25":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:{v : GHC.Integer.Type.Integer | v /= 0}\n-> {v : GHC.Integer.Type.Integer | x1 >= 0 && x2 >= 0 => v >= 0 && x1 >= 0 && x2 >= 1 => v <= x1 && v == x1 / x2}","ident":"_","row":68,"col":25},"57":{"ann":"{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == as}","ident":"as","row":68,"col":57},"31":{"ann":"{v : GHC.Integer.Type.Integer | v == b}","ident":"b","row":68,"col":31},"36":{"ann":"forall a b.\n(a -> b) -> (Fibonacci.Stream a) -> (Fibonacci.Stream b)","ident":"Fibonacci.streamMap","row":68,"col":36},"53":{"ann":"{v : GHC.Integer.Type.Integer | v == b}","ident":"_","row":68,"col":53},"23":{"ann":"{v : GHC.Integer.Type.Integer | v == a}","ident":"a","row":68,"col":23},"62":{"ann":"{VV : (Fibonacci.Stream GHC.Integer.Type.Integer) | false}","ident":"q","row":68,"col":62},"34":{"ann":"({v : (Fibonacci.Stream GHC.Integer.Type.Integer) | false}\n -> {v : (Fibonacci.Stream GHC.Integer.Type.Integer) | false})\n-> {v : (Fibonacci.Stream GHC.Integer.Type.Integer) | false}\n-> {v : (Fibonacci.Stream GHC.Integer.Type.Integer) | false}","ident":"_","row":68,"col":34},"64":{"ann":"{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == bs}","ident":"bs","row":68,"col":64},"63":{"ann":"(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))","ident":"Fibonacci.$fNumStream","row":68,"col":63},"11":{"ann":"{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | false}","ident":"q","row":68,"col":11},"47":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:{v : GHC.Integer.Type.Integer | v /= 0}\n-> {v : GHC.Integer.Type.Integer | x1 >= 0 && x2 >= 0 => v >= 0 && x1 >= 0 && x2 >= 1 => v <= x1 && v == x1 / x2}","ident":"_","row":68,"col":47},"60":{"ann":"(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))","ident":"Fibonacci.$fNumStream","row":68,"col":60}},"45":{"1":{"ann":"(Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"Fibonacci.nats","row":45,"col":1},"8":{"ann":"forall a. (a -> a) -> a -> (Fibonacci.Stream a)","ident":"Fibonacci.streamFromSeed","row":45,"col":8},"24":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}","ident":"_","row":45,"col":24}},"67":{"37":{"ann":"{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | false}","ident":"q","row":67,"col":37},"3":{"ann":"(Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"$c/","row":67,"col":3}},"90":{"30":{"ann":"((GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n -> Fibonacci.Matrix)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix","ident":"_","row":90,"col":30},"23":{"ann":"(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix","ident":"Fibonacci.Matrix","row":90,"col":23},"40":{"ann":"GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer","ident":"lq_anf__d1PP","row":90,"col":40},"47":{"ann":"(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)","ident":"lq_anf__d1PQ","row":90,"col":47},"3":{"ann":"Fibonacci.Matrix -> Fibonacci.Matrix","ident":"$cnegate","row":90,"col":3},"32":{"ann":"(GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)","ident":"_","row":90,"col":32}},"89":{"30":{"ann":"((GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n -> Fibonacci.Matrix)\n-> (GHC.Integer.Type.Integer\n    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))\n-> GHC.Integer.Type.Integer\n-> exists [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)].Fibonacci.Matrix","ident":"_","row":89,"col":30},"23":{"ann":"(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix","ident":"Fibonacci.Matrix","row":89,"col":23},"3":{"ann":"GHC.Integer.Type.Integer -> Fibonacci.Matrix","ident":"$cfromInteger","row":89,"col":3},"32":{"ann":"GHC.Integer.Type.Integer\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)","ident":"lq_anf__d1P2","row":89,"col":32}},"18":{"15":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}","ident":"_","row":18,"col":15},"25":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + v}","ident":"lq_anf__d1Pm","row":18,"col":25},"13":{"ann":"{v : [GHC.Integer.Type.Integer] | null v <=> false && len v >= 0}","ident":"lq_anf__d1Pp","row":18,"col":13},"36":{"ann":"x1:{v : [GHC.Integer.Type.Integer] | len v > 0}\n-> {v : [GHC.Integer.Type.Integer] | len v == len x1 - 1}","ident":"_","row":18,"col":36},"29":{"ann":"[GHC.Integer.Type.Integer]","ident":"Fibonacci.fibs2","row":18,"col":29},"17":{"ann":"(GHC.Integer.Type.Integer\n -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> x4:[GHC.Integer.Type.Integer]\n-> x5:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | len v <= len x4 && len v <= len x5}","ident":"_","row":18,"col":17},"1":{"ann":"[GHC.Integer.Type.Integer]","ident":"Fibonacci.fibs2","row":18,"col":1},"41":{"ann":"[GHC.Integer.Type.Integer]","ident":"Fibonacci.fibs2","row":18,"col":41},"11":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}","ident":"_","row":18,"col":11},"9":{"ann":"{v : GHC.Integer.Type.Integer | v == 0}","ident":"lq_anf__d1Pk","row":18,"col":9}},"40":{"15":{"ann":"a -> b -> c","ident":"f","row":40,"col":15},"1":{"ann":"forall a b c.\n(a -> b -> c)\n-> (Fibonacci.Stream a)\n-> (Fibonacci.Stream b)\n-> (Fibonacci.Stream c)","ident":"Fibonacci.streamZipWith","row":40,"col":1}},"95":{"3":{"ann":"Fibonacci.Matrix -> Fibonacci.Matrix -> Fibonacci.Matrix","ident":"$c*","row":95,"col":3}},"105":{"34":{"ann":"{v : GHC.Integer.Type.Integer | v == b}","ident":"b","row":105,"col":34},"9":{"ann":"Fibonacci.Matrix -> GHC.Integer.Type.Integer","ident":"snd","row":105,"col":9}},"26":{"10":{"ann":"forall a.\n(GHC.Show.Show [Contravariant]\n[] a) =>\n(GHC.Show.Show (Fibonacci.Stream a))","ident":"Fibonacci.$fShowStream","row":26,"col":10}},"59":{"22":{"ann":"GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"lq_anf__d1OZ","row":59,"col":22},"30":{"ann":"forall a. a -> (Fibonacci.Stream a)","ident":"Fibonacci.streamRepeat","row":59,"col":30},"17":{"ann":"(GHC.Integer.Type.Integer\n -> (Fibonacci.Stream GHC.Integer.Type.Integer)\n -> (Fibonacci.Stream GHC.Integer.Type.Integer))\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"_","row":59,"col":17},"3":{"ann":"GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"$cfromInteger","row":59,"col":3}},"52":{"48":{"ann":"{VV : a | VV == n}","ident":"n","row":52,"col":48},"57":{"ann":"a -> a","ident":"_","row":52,"col":57},"12":{"ann":"a","ident":"n","row":52,"col":12},"35":{"ann":"forall a. a -> (Fibonacci.Stream a)","ident":"Fibonacci.streamRepeat","row":52,"col":35},"62":{"ann":"{VV : a | VV == n}","ident":"n","row":52,"col":62},"52":{"ann":"a -> (Fibonacci.Stream a)","ident":"go","row":52,"col":52},"16":{"ann":"forall a.\n(Fibonacci.Stream a)\n-> (Fibonacci.Stream a) -> (Fibonacci.Stream a)","ident":"Fibonacci.interleaveStreams","row":52,"col":16},"55":{"ann":"(a -> (Fibonacci.Stream a)) -> a -> (Fibonacci.Stream a)","ident":"_","row":52,"col":55},"9":{"ann":"forall a.\n(GHC.Enum.Enum [Bivariant]\n[] a) =>\na -> (Fibonacci.Stream a)","ident":"go","row":52,"col":9}},"34":{"28":{"ann":"a -> (Fibonacci.Stream a) -> (Fibonacci.Stream a)","ident":"_","row":34,"col":28},"36":{"ann":"a -> b","ident":"_","row":34,"col":36},"1":{"ann":"forall a b.\n(a -> b) -> (Fibonacci.Stream a) -> (Fibonacci.Stream b)","ident":"Fibonacci.streamMap","row":34,"col":1},"52":{"ann":"a -> b","ident":"f","row":34,"col":52},"11":{"ann":"a -> b","ident":"f","row":34,"col":11},"38":{"ann":"{VV : a | VV == e}","ident":"e","row":34,"col":38},"42":{"ann":"forall a b.\n(a -> b) -> (Fibonacci.Stream a) -> (Fibonacci.Stream b)","ident":"Fibonacci.streamMap","row":34,"col":42},"54":{"ann":"{v : (Fibonacci.Stream a) | v == s}","ident":"s","row":34,"col":54}},"103":{"14":{"ann":"(Fibonacci.Matrix -> GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix -> GHC.Integer.Type.Integer","ident":"_","row":103,"col":14},"19":{"ann":"GHC.Integer.Type.Integer","ident":"ds_d1Np","row":103,"col":19},"18":{"ann":"(GHC.Num.Num Fibonacci.Matrix)","ident":"Fibonacci.$fNumMatrix","row":103,"col":18},"16":{"ann":"{v : Fibonacci.Matrix | v == f1}","ident":"f1","row":103,"col":16},"10":{"ann":"Fibonacci.Matrix -> GHC.Integer.Type.Integer","ident":"snd","row":103,"col":10}},"64":{"15":{"ann":"{v : GHC.Integer.Type.Integer | v == b}","ident":"b","row":64,"col":15},"37":{"ann":"{v : GHC.Integer.Type.Integer | v == a}","ident":"_","row":64,"col":37},"25":{"ann":"forall a b.\n(a -> b) -> (Fibonacci.Stream a) -> (Fibonacci.Stream b)","ident":"Fibonacci.streamMap","row":64,"col":25},"13":{"ann":"{v : GHC.Integer.Type.Integer | v == a}","ident":"a","row":64,"col":13},"14":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":64,"col":14},"36":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":64,"col":36},"50":{"ann":"(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))","ident":"Fibonacci.$fNumStream","row":64,"col":50},"18":{"ann":"((Fibonacci.Stream GHC.Integer.Type.Integer)\n -> (Fibonacci.Stream GHC.Integer.Type.Integer))\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"_","row":64,"col":18},"40":{"ann":"{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == bs'}","ident":"bs'","row":64,"col":40},"52":{"ann":"{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == bs && v == Fibonacci.Stream b bs'}","ident":"lq_anf__d1PV","row":64,"col":52},"20":{"ann":"(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))","ident":"Fibonacci.$fNumStream","row":64,"col":20},"46":{"ann":"{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == as'}","ident":"as'","row":64,"col":46},"5":{"ann":"GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"_","row":64,"col":5}},"93":{"37":{"ann":"(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)","ident":"lq_anf__d1Ps","row":93,"col":37},"14":{"ann":"([GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer)\n-> ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer])\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)","ident":"_","row":93,"col":14},"22":{"ann":"[GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer","ident":"lq_anf__d1Pq","row":93,"col":22},"12":{"ann":"((GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n -> Fibonacci.Matrix)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix","ident":"_","row":93,"col":12},"35":{"ann":"(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)","ident":"lq_anf__d1Pr","row":93,"col":35},"34":{"ann":"{v : [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)] | null v <=> false && len v >= 0}","ident":"lq_anf__d1Pv","row":93,"col":34},"5":{"ann":"(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix","ident":"Fibonacci.Matrix","row":93,"col":5},"27":{"ann":"[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]\n-> ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer])","ident":"_","row":93,"col":27}},"104":{"14":{"ann":"(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix","ident":"_","row":104,"col":14},"21":{"ann":"(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)","ident":"lq_anf__d1QI","row":104,"col":21},"9":{"ann":"Fibonacci.Matrix","ident":"f1","row":104,"col":9}},"58":{"10":{"ann":"(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))","ident":"Fibonacci.$fNumStream","row":58,"col":10}},"27":{"51":{"ann":"(x2:[GHC.Types.Char]\n -> {v : [GHC.Types.Char] | v /= x2 && len v >= 0 && len v < len x2})\n-> ((Fibonacci.Stream a) -> [GHC.Types.Char])\n-> (Fibonacci.Stream a)\n-> exists [z:[GHC.Types.Char]].{v : [GHC.Types.Char] | v /= z && len v >= 0 && len v < len z}","ident":"_","row":27,"col":51},"37":{"ann":"([GHC.Types.Char] -> [GHC.Types.Char])\n-> ((Fibonacci.Stream a) -> [GHC.Types.Char])\n-> (Fibonacci.Stream a)\n-> exists [[GHC.Types.Char]].[GHC.Types.Char]","ident":"_","row":27,"col":37},"44":{"ann":"({v : [GHC.Types.Char] | len v >= 0} -> [GHC.Types.Char])\n-> ((Fibonacci.Stream a) -> {v : [GHC.Types.Char] | len v >= 0})\n-> (Fibonacci.Stream a)\n-> exists [{v : [GHC.Types.Char] | len v >= 0}].[GHC.Types.Char]","ident":"_","row":27,"col":44},"29":{"ann":"[GHC.Types.Char]","ident":"_","row":27,"col":29},"53":{"ann":"[a] -> [GHC.Types.Char]","ident":"lq_anf__d1ON","row":27,"col":53},"68":{"ann":"(x2:[a] -> {v : [a] | len v >= 0 && len v <= len x2})\n-> ((Fibonacci.Stream a) -> [a])\n-> (Fibonacci.Stream a)\n-> exists [z:[a]].{v : [a] | len v >= 0 && len v <= len z}","ident":"_","row":27,"col":68},"26":{"ann":"(Fibonacci.Stream a) -> exists [[GHC.Types.Char]].[GHC.Types.Char]","ident":"lq_anf__d1OV","row":27,"col":26},"70":{"ann":"(Fibonacci.Stream a) -> [a]","ident":"lq_anf__d1OQ","row":27,"col":70},"20":{"ann":"x1:[GHC.Types.Char]\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | len v == len x1 + len v}","ident":"_","row":27,"col":20},"39":{"ann":"x1:{v : [GHC.Types.Char] | len v > 0}\n-> {v : [GHC.Types.Char] | len v == len x1 - 1}","ident":"lq_anf__d1OL","row":27,"col":39},"46":{"ann":"x1:{v : [GHC.Types.Char] | len v > 0}\n-> {v : [GHC.Types.Char] | len v == len x1 - 1}","ident":"lq_anf__d1OM","row":27,"col":46},"58":{"ann":"({v : [a] | len v >= 0} -> [GHC.Types.Char])\n-> ((Fibonacci.Stream a) -> {v : [a] | len v >= 0})\n-> (Fibonacci.Stream a)\n-> exists [{v : [a] | len v >= 0}].[GHC.Types.Char]","ident":"_","row":27,"col":58},"27":{"ann":"x1:[GHC.Types.Char]\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | len v == len x1 + len v}","ident":"_","row":27,"col":27},"11":{"ann":"{v : [GHC.Types.Char] | len v >= 0}","ident":"lq_anf__d1OI","row":27,"col":11},"65":{"ann":"{v : GHC.Types.Int | v == (20  :  int)}","ident":"lq_anf__d1OO","row":27,"col":65},"3":{"ann":"forall a.\n(GHC.Show.Show [Contravariant]\n[] a) =>\n(Fibonacci.Stream a) -> [GHC.Types.Char]","ident":"$cshow","row":27,"col":3},"24":{"ann":"([GHC.Types.Char] -> [GHC.Types.Char])\n-> ((Fibonacci.Stream a) -> [GHC.Types.Char])\n-> (Fibonacci.Stream a)\n-> exists [[GHC.Types.Char]].[GHC.Types.Char]","ident":"_","row":27,"col":24},"60":{"ann":"x1:GHC.Types.Int\n-> x2:[a]\n-> {v : [a] | not (x1 >= 0) => len v == 0 && x1 >= 0 => len v == if (len x2 < x1) then len x2 else x1}","ident":"_","row":27,"col":60}},"41":{"15":{"ann":"{VV : a | VV == b}","ident":"b","row":41,"col":15},"13":{"ann":"{VV : a | VV == a}","ident":"a","row":41,"col":13},"36":{"ann":"{v : (Fibonacci.Stream a) | v == as}","ident":"as","row":41,"col":36},"18":{"ann":"((Fibonacci.Stream a) -> (Fibonacci.Stream a))\n-> (Fibonacci.Stream a) -> (Fibonacci.Stream a)","ident":"_","row":41,"col":18},"34":{"ann":"a -> b -> c","ident":"f","row":41,"col":34},"20":{"ann":"forall a b c.\n(a -> b -> c)\n-> (Fibonacci.Stream a)\n-> (Fibonacci.Stream b)\n-> (Fibonacci.Stream c)","ident":"Fibonacci.streamZipWith","row":41,"col":20},"39":{"ann":"{v : (Fibonacci.Stream a) | v == bs}","ident":"bs","row":41,"col":39},"11":{"ann":"a -> b -> c","ident":"_","row":41,"col":11},"3":{"ann":"a -> (Fibonacci.Stream a) -> (Fibonacci.Stream a)","ident":"_","row":41,"col":3}},"63":{"22":{"ann":"(Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"bs","row":63,"col":22},"3":{"ann":"(Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"$c*","row":63,"col":3}},"99":{"7":{"ann":"GHC.Integer.Type.Integer","ident":"n","row":99,"col":7},"31":{"ann":"(GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)","ident":"_","row":99,"col":31},"22":{"ann":"(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix","ident":"Fibonacci.Matrix","row":99,"col":22},"44":{"ann":"(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)","ident":"lq_anf__d1Qh","row":99,"col":44},"29":{"ann":"((GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n -> Fibonacci.Matrix)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix","ident":"_","row":99,"col":29},"1":{"ann":"GHC.Integer.Type.Integer -> Fibonacci.Matrix -> Fibonacci.Matrix","ident":"Fibonacci.scale","row":99,"col":1},"40":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":99,"col":40},"41":{"ann":"{v : GHC.Integer.Type.Integer | v == n}","ident":"_","row":99,"col":41}},"77":{"31":{"ann":"forall a\n       b\n       c\n       d <p4 :: c-> b-> a d -> Prop, p3 :: b-> a c -> Prop, p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> x3:{VV : c<p3 x2 x1> | true}\n-> x4:{VV : d<p4 x3 x2 x1> | true}\n-> {v : (a, b, c, d)<\\x6 VV -> p2 x6, \\x7 x8 VV -> p3 x7 x8, \\x9 x10 x11 VV -> p4 x9 x10 x11> | x_Tuple44 v == x4 && x_Tuple41 v == x1 && x_Tuple43 v == x3 && x_Tuple42 v == x2}","ident":"GHC.Tuple.(,,,)","row":77,"col":31},"36":{"ann":"{VV : a | VV == a}","ident":"a","row":77,"col":36},"1":{"ann":"forall a. a -> (a, a, a, a)","ident":"Fibonacci.toTup4","row":77,"col":1},"34":{"ann":"{VV : a | VV == a}","ident":"a","row":77,"col":34},"38":{"ann":"{VV : a | VV == a}","ident":"a","row":77,"col":38},"9":{"ann":"a","ident":"a","row":77,"col":9},"32":{"ann":"{VV : a | VV == a}","ident":"a","row":77,"col":32}},"11":{"15":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 - x2}","ident":"_","row":11,"col":15},"14":{"ann":"GHC.Integer.Type.Integer","ident":"ds_d1NK","row":11,"col":14},"19":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}","ident":"_","row":11,"col":19},"26":{"ann":"GHC.Integer.Type.Integer","ident":"ds_d1NK","row":11,"col":26},"27":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 - x2}","ident":"_","row":11,"col":27},"21":{"ann":"GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer","ident":"Fibonacci.fib","row":11,"col":21},"9":{"ann":"GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer","ident":"Fibonacci.fib","row":11,"col":9}},"92":{"3":{"ann":"Fibonacci.Matrix -> Fibonacci.Matrix -> Fibonacci.Matrix","ident":"$c+","row":92,"col":3}},"102":{"1":{"ann":"GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer","ident":"Fibonacci.fib4","row":102,"col":1}},"24":{"31":{"ann":"x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}","ident":"_","row":24,"col":31},"29":{"ann":"{VV : a | VV == e}","ident":"e","row":24,"col":29},"1":{"ann":"forall a. (Fibonacci.Stream a) -> [a]","ident":"Fibonacci.streamToList","row":24,"col":1},"46":{"ann":"{v : (Fibonacci.Stream a) | v == s}","ident":"s","row":24,"col":46},"33":{"ann":"forall a. (Fibonacci.Stream a) -> [a]","ident":"Fibonacci.streamToList","row":24,"col":33}},"79":{"37":{"ann":"a -> b","ident":"_","row":79,"col":37},"31":{"ann":"forall a\n       b\n       c\n       d <p4 :: c-> b-> a d -> Prop, p3 :: b-> a c -> Prop, p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> x3:{VV : c<p3 x2 x1> | true}\n-> x4:{VV : d<p4 x3 x2 x1> | true}\n-> {v : (a, b, c, d)<\\x6 VV -> p2 x6, \\x7 x8 VV -> p3 x7 x8, \\x9 x10 x11 VV -> p4 x9 x10 x11> | x_Tuple44 v == x4 && x_Tuple41 v == x1 && x_Tuple43 v == x3 && x_Tuple42 v == x2}","ident":"GHC.Tuple.(,,,)","row":79,"col":31},"49":{"ann":"{VV : a | VV == d}","ident":"d","row":79,"col":49},"44":{"ann":"{VV : a | VV == c}","ident":"c","row":79,"col":44},"1":{"ann":"forall a b c d e f g h.\n((a -> e), (b -> f), (c -> g), (d -> h))\n-> (a, b, c, d) -> (e, f, g, h)","ident":"Fibonacci.zipApp4","row":79,"col":1},"34":{"ann":"{VV : a | VV == a}","ident":"a","row":79,"col":34},"39":{"ann":"{VV : a | VV == b}","ident":"b","row":79,"col":39},"47":{"ann":"a -> b","ident":"_","row":79,"col":47},"42":{"ann":"a -> b","ident":"_","row":79,"col":42},"32":{"ann":"a -> b","ident":"_","row":79,"col":32}},"60":{"17":{"ann":"forall a b.\n(a -> b) -> (Fibonacci.Stream a) -> (Fibonacci.Stream b)","ident":"Fibonacci.streamMap","row":60,"col":17},"27":{"ann":"GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer","ident":"lq_anf__d1PT","row":60,"col":27},"3":{"ann":"(Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)","ident":"$cnegate","row":60,"col":3}},"9":{"1":{"ann":"GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer","ident":"Fibonacci.fib","row":9,"col":1}}},"errors":[{"start":{"line":27,"column":46},"stop":{"line":27,"column":50},"message":"/Users/matt/Dropbox/cis194/06/flycheck_Fibonacci.hs:27:46-49: Error: Liquid Type Mismatch\n  Inferred type\n    VV : [Char]\n \n  not a subtype of Required type\n    VV : [Char] | len VV > 0\n \n  In Context\n    VV : [Char] | len VV >= 0"},{"start":{"line":27,"column":39},"stop":{"line":27,"column":43},"message":"/Users/matt/Dropbox/cis194/06/flycheck_Fibonacci.hs:27:39-42: Error: Liquid Type Mismatch\n  Inferred type\n    VV : [Char] | len VV >= 0\n \n  not a subtype of Required type\n    VV : [Char] | len VV > 0\n \n  In Context\n    VV : [Char] | len VV >= 0"},{"start":{"line":18,"column":41},"stop":{"line":18,"column":46},"message":"/Users/matt/Dropbox/cis194/06/flycheck_Fibonacci.hs:18:41-45: Error: Liquid Type Mismatch\n  Inferred type\n    VV : [Integer] | VV == Fibonacci.fibs2 && len VV >= 0\n \n  not a subtype of Required type\n    VV : [Integer] | len VV > 0\n \n  In Context\n    VV : [Integer] | VV == Fibonacci.fibs2 && len VV >= 0\n    Fibonacci.fibs2\n       : [Integer] | len Fibonacci.fibs2 >= 0"}]}