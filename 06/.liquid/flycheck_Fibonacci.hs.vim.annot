9:1-9:4::Fibonacci.fib :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
11:9-11:12::Fibonacci.fib :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
11:14-11:15::ds_d1NK :: "GHC.Integer.Type.Integer"
11:15-11:16::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 - x2}"
11:19-11:20::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}"
11:21-11:24::Fibonacci.fib :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
11:26-11:27::ds_d1NK :: "GHC.Integer.Type.Integer"
11:27-11:28::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 - x2}"
14:1-14:6::Fibonacci.fibs1 :: "[GHC.Integer.Type.Integer]"
14:9-14:12::_ :: "(GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> x3:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | len v == len x3}"
14:13-14:16::Fibonacci.fib :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
14:17-14:22::lq_anf__d1Qw :: "{v : [GHC.Integer.Type.Integer] | len v >= 0}"
18:1-18:6::Fibonacci.fibs2 :: "[GHC.Integer.Type.Integer]"
18:9-18:47::lq_anf__d1Pk :: "{v : GHC.Integer.Type.Integer | v == 0}"
18:11-18:12::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
18:13-18:47::lq_anf__d1Pp :: "{v : [GHC.Integer.Type.Integer] | null v <=> false && len v >= 0}"
18:15-18:16::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
18:17-18:24::_ :: "(GHC.Integer.Type.Integer\n -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> x4:[GHC.Integer.Type.Integer]\n-> x5:[GHC.Integer.Type.Integer]\n-> {v : [GHC.Integer.Type.Integer] | len v <= len x4 && len v <= len x5}"
18:25-18:28::lq_anf__d1Pm :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + v}"
18:29-18:34::Fibonacci.fibs2 :: "[GHC.Integer.Type.Integer]"
18:36-18:40::_ :: "x1:{v : [GHC.Integer.Type.Integer] | len v > 0}\n-> {v : [GHC.Integer.Type.Integer] | len v == len x1 - 1}"
18:41-18:46::Fibonacci.fibs2 :: "[GHC.Integer.Type.Integer]"
24:1-24:13::Fibonacci.streamToList :: "forall a. (Fibonacci.Stream a) -> [a]"
24:29-24:30::e :: "{VV : a | VV == e}"
24:31-24:32::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
24:33-24:45::Fibonacci.streamToList :: "forall a. (Fibonacci.Stream a) -> [a]"
24:46-24:47::s :: "{v : (Fibonacci.Stream a) | v == s}"
26:10-26:35::Fibonacci.$fShowStream :: "forall a.\n(GHC.Show.Show [Contravariant]\n[] a) =>\n(GHC.Show.Show (Fibonacci.Stream a))"
27:3-27:7::$cshow :: "forall a.\n(GHC.Show.Show [Contravariant]\n[] a) =>\n(Fibonacci.Stream a) -> [GHC.Types.Char]"
27:11-27:20::lq_anf__d1OI :: "{v : [GHC.Types.Char] | len v >= 0}"
27:20-27:22::_ :: "x1:[GHC.Types.Char]\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | len v == len x1 + len v}"
27:24-27:25::_ :: "([GHC.Types.Char] -> [GHC.Types.Char])\n-> ((Fibonacci.Stream a) -> [GHC.Types.Char])\n-> (Fibonacci.Stream a)\n-> exists [[GHC.Types.Char]].[GHC.Types.Char]"
27:26-27:82::lq_anf__d1OV :: "(Fibonacci.Stream a) -> exists [[GHC.Types.Char]].[GHC.Types.Char]"
27:27-27:29::_ :: "x1:[GHC.Types.Char]\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | len v == len x1 + len v}"
27:29-27:35::_ :: "[GHC.Types.Char]"
27:37-27:38::_ :: "([GHC.Types.Char] -> [GHC.Types.Char])\n-> ((Fibonacci.Stream a) -> [GHC.Types.Char])\n-> (Fibonacci.Stream a)\n-> exists [[GHC.Types.Char]].[GHC.Types.Char]"
27:39-27:43::lq_anf__d1OL :: "x1:{v : [GHC.Types.Char] | len v > 0}\n-> {v : [GHC.Types.Char] | len v == len x1 - 1}"
27:44-27:45::_ :: "({v : [GHC.Types.Char] | len v >= 0} -> [GHC.Types.Char])\n-> ((Fibonacci.Stream a) -> {v : [GHC.Types.Char] | len v >= 0})\n-> (Fibonacci.Stream a)\n-> exists [{v : [GHC.Types.Char] | len v >= 0}].[GHC.Types.Char]"
27:46-27:50::lq_anf__d1OM :: "x1:{v : [GHC.Types.Char] | len v > 0}\n-> {v : [GHC.Types.Char] | len v == len x1 - 1}"
27:51-27:52::_ :: "(x2:[GHC.Types.Char]\n -> {v : [GHC.Types.Char] | v /= x2 && len v >= 0 && len v < len x2})\n-> ((Fibonacci.Stream a) -> [GHC.Types.Char])\n-> (Fibonacci.Stream a)\n-> exists [z:[GHC.Types.Char]].{v : [GHC.Types.Char] | v /= z && len v >= 0 && len v < len z}"
27:53-27:57::lq_anf__d1ON :: "[a] -> [GHC.Types.Char]"
27:58-27:59::_ :: "({v : [a] | len v >= 0} -> [GHC.Types.Char])\n-> ((Fibonacci.Stream a) -> {v : [a] | len v >= 0})\n-> (Fibonacci.Stream a)\n-> exists [{v : [a] | len v >= 0}].[GHC.Types.Char]"
27:60-27:64::_ :: "x1:GHC.Types.Int\n-> x2:[a]\n-> {v : [a] | not (x1 >= 0) => len v == 0 && x1 >= 0 => len v == if (len x2 < x1) then len x2 else x1}"
27:65-27:67::lq_anf__d1OO :: "{v : GHC.Types.Int | v == (20  :  int)}"
27:68-27:69::_ :: "(x2:[a] -> {v : [a] | len v >= 0 && len v <= len x2})\n-> ((Fibonacci.Stream a) -> [a])\n-> (Fibonacci.Stream a)\n-> exists [z:[a]].{v : [a] | len v >= 0 && len v <= len z}"
27:70-27:82::lq_anf__d1OQ :: "(Fibonacci.Stream a) -> [a]"
31:1-31:13::Fibonacci.streamRepeat :: "forall a. a -> (Fibonacci.Stream a)"
31:14-31:15::e :: "a"
31:18-31:24::_ :: "a -> (Fibonacci.Stream a) -> (Fibonacci.Stream a)"
31:25-31:26::e :: "{VV : a | VV == e}"
31:28-31:40::Fibonacci.streamRepeat :: "forall a. a -> (Fibonacci.Stream a)"
31:41-31:42::e :: "{VV : a | VV == e}"
34:1-34:10::Fibonacci.streamMap :: "forall a b.\n(a -> b) -> (Fibonacci.Stream a) -> (Fibonacci.Stream b)"
34:11-34:12::f :: "a -> b"
34:28-34:34::_ :: "a -> (Fibonacci.Stream a) -> (Fibonacci.Stream a)"
34:36-34:37::_ :: "a -> b"
34:38-34:39::e :: "{VV : a | VV == e}"
34:42-34:51::Fibonacci.streamMap :: "forall a b.\n(a -> b) -> (Fibonacci.Stream a) -> (Fibonacci.Stream b)"
34:52-34:53::f :: "a -> b"
34:54-34:55::s :: "{v : (Fibonacci.Stream a) | v == s}"
37:1-37:15::Fibonacci.streamFromSeed :: "forall a. (a -> a) -> a -> (Fibonacci.Stream a)"
37:16-37:17::f :: "a -> a"
37:18-37:19::s :: "a"
37:22-37:28::_ :: "a -> (Fibonacci.Stream a) -> (Fibonacci.Stream a)"
37:29-37:30::s :: "{VV : a | VV == s}"
37:31-37:32::_ :: "((Fibonacci.Stream a) -> (Fibonacci.Stream a))\n-> (Fibonacci.Stream a) -> (Fibonacci.Stream a)"
37:33-37:47::Fibonacci.streamFromSeed :: "forall a. (a -> a) -> a -> (Fibonacci.Stream a)"
37:48-37:49::f :: "a -> a"
37:51-37:52::_ :: "a -> a"
37:53-37:54::s :: "{VV : a | VV == s}"
40:1-40:14::Fibonacci.streamZipWith :: "forall a b c.\n(a -> b -> c)\n-> (Fibonacci.Stream a)\n-> (Fibonacci.Stream b)\n-> (Fibonacci.Stream c)"
40:15-40:16::f :: "a -> b -> c"
41:3-41:9::_ :: "a -> (Fibonacci.Stream a) -> (Fibonacci.Stream a)"
41:11-41:12::_ :: "a -> b -> c"
41:13-41:14::a :: "{VV : a | VV == a}"
41:15-41:16::b :: "{VV : a | VV == b}"
41:18-41:19::_ :: "((Fibonacci.Stream a) -> (Fibonacci.Stream a))\n-> (Fibonacci.Stream a) -> (Fibonacci.Stream a)"
41:20-41:33::Fibonacci.streamZipWith :: "forall a b c.\n(a -> b -> c)\n-> (Fibonacci.Stream a)\n-> (Fibonacci.Stream b)\n-> (Fibonacci.Stream c)"
41:34-41:35::f :: "a -> b -> c"
41:36-41:38::as :: "{v : (Fibonacci.Stream a) | v == as}"
41:39-41:41::bs :: "{v : (Fibonacci.Stream a) | v == bs}"
45:1-45:5::Fibonacci.nats :: "(Fibonacci.Stream GHC.Integer.Type.Integer)"
45:8-45:22::Fibonacci.streamFromSeed :: "forall a. (a -> a) -> a -> (Fibonacci.Stream a)"
45:24-45:25::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}"
48:1-48:18::Fibonacci.interleaveStreams :: "forall a.\n(Fibonacci.Stream a)\n-> (Fibonacci.Stream a) -> (Fibonacci.Stream a)"
48:34-48:36::s2 :: "(Fibonacci.Stream a)"
48:39-48:45::_ :: "a -> (Fibonacci.Stream a) -> (Fibonacci.Stream a)"
48:46-48:48::e1 :: "{VV : a | VV == e1}"
48:49-48:50::_ :: "((Fibonacci.Stream a) -> (Fibonacci.Stream a))\n-> (Fibonacci.Stream a) -> (Fibonacci.Stream a)"
48:51-48:68::Fibonacci.interleaveStreams :: "forall a.\n(Fibonacci.Stream a)\n-> (Fibonacci.Stream a) -> (Fibonacci.Stream a)"
48:69-48:71::s2 :: "{v : (Fibonacci.Stream a) | v == s2}"
48:72-48:74::s1 :: "{v : (Fibonacci.Stream a) | v == s1}"
51:1-51:6::Fibonacci.ruler :: "(Fibonacci.Stream GHC.Integer.Type.Integer)"
51:9-51:11::_ :: "GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
52:9-52:11::go :: "forall a.\n(GHC.Enum.Enum [Bivariant]\n[] a) =>\na -> (Fibonacci.Stream a)"
52:12-52:13::n :: "a"
52:16-52:33::Fibonacci.interleaveStreams :: "forall a.\n(Fibonacci.Stream a)\n-> (Fibonacci.Stream a) -> (Fibonacci.Stream a)"
52:35-52:47::Fibonacci.streamRepeat :: "forall a. a -> (Fibonacci.Stream a)"
52:48-52:49::n :: "{VV : a | VV == n}"
52:52-52:54::go :: "a -> (Fibonacci.Stream a)"
52:55-52:56::_ :: "(a -> (Fibonacci.Stream a)) -> a -> (Fibonacci.Stream a)"
52:57-52:61::_ :: "a -> a"
52:62-52:63::n :: "{VV : a | VV == n}"
56:1-56:2::Fibonacci.x :: "(Fibonacci.Stream GHC.Integer.Type.Integer)"
56:5-56:11::_ :: "GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
56:14-56:15::_ :: "((Fibonacci.Stream GHC.Integer.Type.Integer)\n -> (Fibonacci.Stream GHC.Integer.Type.Integer))\n-> ((Fibonacci.Stream GHC.Integer.Type.Integer)\n    -> (Fibonacci.Stream GHC.Integer.Type.Integer))\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> exists [(Fibonacci.Stream GHC.Integer.Type.Integer)].(Fibonacci.Stream GHC.Integer.Type.Integer)"
56:16-56:22::_ :: "GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
56:25-56:26::_ :: "((Fibonacci.Stream GHC.Integer.Type.Integer)\n -> (Fibonacci.Stream GHC.Integer.Type.Integer))\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
56:27-56:39::Fibonacci.streamRepeat :: "forall a. a -> (Fibonacci.Stream a)"
58:10-58:30::Fibonacci.$fNumStream :: "(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))"
59:3-59:14::$cfromInteger :: "GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
59:17-59:21::_ :: "(GHC.Integer.Type.Integer\n -> (Fibonacci.Stream GHC.Integer.Type.Integer)\n -> (Fibonacci.Stream GHC.Integer.Type.Integer))\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
59:22-59:28::lq_anf__d1OZ :: "GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
59:30-59:42::Fibonacci.streamRepeat :: "forall a. a -> (Fibonacci.Stream a)"
60:3-60:9::$cnegate :: "(Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
60:17-60:26::Fibonacci.streamMap :: "forall a b.\n(a -> b) -> (Fibonacci.Stream a) -> (Fibonacci.Stream b)"
60:27-60:33::lq_anf__d1PT :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
61:3-61:6::$c+ :: "(Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
61:17-61:30::Fibonacci.streamZipWith :: "forall a b c.\n(a -> b -> c)\n-> (Fibonacci.Stream a)\n-> (Fibonacci.Stream b)\n-> (Fibonacci.Stream c)"
61:31-61:34::lq_anf__d1PS :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + v}"
63:3-63:6::$c* :: "(Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
63:22-63:24::bs :: "(Fibonacci.Stream GHC.Integer.Type.Integer)"
64:5-64:11::_ :: "GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
64:13-64:14::a :: "{v : GHC.Integer.Type.Integer | v == a}"
64:14-64:15::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
64:15-64:16::b :: "{v : GHC.Integer.Type.Integer | v == b}"
64:18-64:19::_ :: "((Fibonacci.Stream GHC.Integer.Type.Integer)\n -> (Fibonacci.Stream GHC.Integer.Type.Integer))\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
64:20-64:23::Fibonacci.$fNumStream :: "(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))"
64:25-64:34::Fibonacci.streamMap :: "forall a b.\n(a -> b) -> (Fibonacci.Stream a) -> (Fibonacci.Stream b)"
64:36-64:37::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
64:37-64:38::_ :: "{v : GHC.Integer.Type.Integer | v == a}"
64:40-64:43::bs' :: "{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == bs'}"
64:46-64:49::as' :: "{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == as'}"
64:50-64:51::Fibonacci.$fNumStream :: "(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))"
64:52-64:54::lq_anf__d1PV :: "{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == bs && v == Fibonacci.Stream b bs'}"
66:10-66:37::Fibonacci.$fFractionalStream :: "(GHC.Real.Fractional (Fibonacci.Stream GHC.Integer.Type.Integer))"
67:3-67:6::$c/ :: "(Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
67:37-67:38::q :: "{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | false}"
68:11-68:12::q :: "{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | false}"
68:15-68:21::_ :: "GHC.Integer.Type.Integer\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)\n-> (Fibonacci.Stream GHC.Integer.Type.Integer)"
68:23-68:24::a :: "{v : GHC.Integer.Type.Integer | v == a}"
68:25-68:30::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:{v : GHC.Integer.Type.Integer | v /= 0}\n-> {v : GHC.Integer.Type.Integer | x1 >= 0 && x2 >= 0 => v >= 0 && x1 >= 0 && x2 >= 1 => v <= x1 && v == x1 / x2}"
68:31-68:32::b :: "{v : GHC.Integer.Type.Integer | v == b}"
68:34-68:35::_ :: "({v : (Fibonacci.Stream GHC.Integer.Type.Integer) | false}\n -> {v : (Fibonacci.Stream GHC.Integer.Type.Integer) | false})\n-> {v : (Fibonacci.Stream GHC.Integer.Type.Integer) | false}\n-> {v : (Fibonacci.Stream GHC.Integer.Type.Integer) | false}"
68:36-68:45::Fibonacci.streamMap :: "forall a b.\n(a -> b) -> (Fibonacci.Stream a) -> (Fibonacci.Stream b)"
68:47-68:52::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:{v : GHC.Integer.Type.Integer | v /= 0}\n-> {v : GHC.Integer.Type.Integer | x1 >= 0 && x2 >= 0 => v >= 0 && x1 >= 0 && x2 >= 1 => v <= x1 && v == x1 / x2}"
68:53-68:54::_ :: "{v : GHC.Integer.Type.Integer | v == b}"
68:57-68:59::as :: "{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == as}"
68:60-68:61::Fibonacci.$fNumStream :: "(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))"
68:62-68:63::q :: "{VV : (Fibonacci.Stream GHC.Integer.Type.Integer) | false}"
68:63-68:64::Fibonacci.$fNumStream :: "(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))"
68:64-68:66::bs :: "{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == bs}"
71:1-71:6::Fibonacci.fibs3 :: "(Fibonacci.Stream GHC.Integer.Type.Integer)"
71:9-71:10::Fibonacci.x :: "{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == Fibonacci.x}"
71:11-71:12::Fibonacci.$fFractionalStream :: "(GHC.Real.Fractional (Fibonacci.Stream GHC.Integer.Type.Integer))"
71:14-71:15::lq_anf__d1Qb :: "(Fibonacci.Stream GHC.Integer.Type.Integer)"
71:16-71:17::Fibonacci.$fNumStream :: "(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))"
71:18-71:19::Fibonacci.x :: "{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == Fibonacci.x}"
71:20-71:21::Fibonacci.$fNumStream :: "(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))"
71:22-71:23::Fibonacci.x :: "{v : (Fibonacci.Stream GHC.Integer.Type.Integer) | v == Fibonacci.x}"
71:23-71:24::Fibonacci.$fNumStream :: "(GHC.Num.Num (Fibonacci.Stream GHC.Integer.Type.Integer))"
75:26-75:30::Fibonacci.$fShowMatrix :: "(GHC.Show.Show Fibonacci.Matrix)"
75:32-75:34::Fibonacci.$fEqMatrix :: "(GHC.Classes.Eq Fibonacci.Matrix)"
77:1-77:7::Fibonacci.toTup4 :: "forall a. a -> (a, a, a, a)"
77:9-77:10::a :: "a"
77:31-77:40::GHC.Tuple.(,,,) :: "forall a\n       b\n       c\n       d <p4 :: c-> b-> a d -> Prop, p3 :: b-> a c -> Prop, p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> x3:{VV : c<p3 x2 x1> | true}\n-> x4:{VV : d<p4 x3 x2 x1> | true}\n-> {v : (a, b, c, d)<\\x6 VV -> p2 x6, \\x7 x8 VV -> p3 x7 x8, \\x9 x10 x11 VV -> p4 x9 x10 x11> | x_Tuple44 v == x4 && x_Tuple41 v == x1 && x_Tuple43 v == x3 && x_Tuple42 v == x2}"
77:32-77:33::a :: "{VV : a | VV == a}"
77:34-77:35::a :: "{VV : a | VV == a}"
77:36-77:37::a :: "{VV : a | VV == a}"
77:38-77:39::a :: "{VV : a | VV == a}"
78:1-78:8::Fibonacci.mapTup4 :: "forall a b. (a -> b) -> (a, a, a, a) -> (b, b, b, b)"
78:9-78:10::f :: "a -> b"
78:31-78:51::GHC.Tuple.(,,,) :: "forall a\n       b\n       c\n       d <p4 :: c-> b-> a d -> Prop, p3 :: b-> a c -> Prop, p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> x3:{VV : c<p3 x2 x1> | true}\n-> x4:{VV : d<p4 x3 x2 x1> | true}\n-> {v : (a, b, c, d)<\\x6 VV -> p2 x6, \\x7 x8 VV -> p3 x7 x8, \\x9 x10 x11 VV -> p4 x9 x10 x11> | x_Tuple44 v == x4 && x_Tuple41 v == x1 && x_Tuple43 v == x3 && x_Tuple42 v == x2}"
78:32-78:33::_ :: "a -> b"
78:34-78:35::a :: "{VV : a | VV == a}"
78:37-78:38::_ :: "a -> b"
78:39-78:40::b :: "{VV : a | VV == b}"
78:42-78:43::_ :: "a -> b"
78:44-78:45::c :: "{VV : a | VV == c}"
78:47-78:48::_ :: "a -> b"
78:49-78:50::d :: "{VV : a | VV == d}"
79:1-79:8::Fibonacci.zipApp4 :: "forall a b c d e f g h.\n((a -> e), (b -> f), (c -> g), (d -> h))\n-> (a, b, c, d) -> (e, f, g, h)"
79:31-79:51::GHC.Tuple.(,,,) :: "forall a\n       b\n       c\n       d <p4 :: c-> b-> a d -> Prop, p3 :: b-> a c -> Prop, p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> x3:{VV : c<p3 x2 x1> | true}\n-> x4:{VV : d<p4 x3 x2 x1> | true}\n-> {v : (a, b, c, d)<\\x6 VV -> p2 x6, \\x7 x8 VV -> p3 x7 x8, \\x9 x10 x11 VV -> p4 x9 x10 x11> | x_Tuple44 v == x4 && x_Tuple41 v == x1 && x_Tuple43 v == x3 && x_Tuple42 v == x2}"
79:32-79:33::_ :: "a -> b"
79:34-79:35::a :: "{VV : a | VV == a}"
79:37-79:38::_ :: "a -> b"
79:39-79:40::b :: "{VV : a | VV == b}"
79:42-79:43::_ :: "a -> b"
79:44-79:45::c :: "{VV : a | VV == c}"
79:47-79:48::_ :: "a -> b"
79:49-79:50::d :: "{VV : a | VV == d}"
88:10-88:20::Fibonacci.$fNumMatrix :: "(GHC.Num.Num Fibonacci.Matrix)"
89:3-89:14::$cfromInteger :: "GHC.Integer.Type.Integer -> Fibonacci.Matrix"
89:23-89:29::Fibonacci.Matrix :: "(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix"
89:30-89:31::_ :: "((GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n -> Fibonacci.Matrix)\n-> (GHC.Integer.Type.Integer\n    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer))\n-> GHC.Integer.Type.Integer\n-> exists [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)].Fibonacci.Matrix"
89:32-89:38::lq_anf__d1P2 :: "GHC.Integer.Type.Integer\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)"
90:3-90:9::$cnegate :: "Fibonacci.Matrix -> Fibonacci.Matrix"
90:23-90:29::Fibonacci.Matrix :: "(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix"
90:30-90:31::_ :: "((GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n -> Fibonacci.Matrix)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix"
90:32-90:39::_ :: "(GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)"
90:40-90:46::lq_anf__d1PP :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
90:47-90:48::lq_anf__d1PQ :: "(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)"
92:3-92:6::$c+ :: "Fibonacci.Matrix -> Fibonacci.Matrix -> Fibonacci.Matrix"
93:5-93:11::Fibonacci.Matrix :: "(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix"
93:12-93:13::_ :: "((GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n -> Fibonacci.Matrix)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix"
93:14-93:21::_ :: "([GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer)\n-> ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer])\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)"
93:22-93:25::lq_anf__d1Pq :: "[GHC.Integer.Type.Integer] -> GHC.Integer.Type.Integer"
93:27-93:33::_ :: "[(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)]\n-> ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer])"
93:34-93:39::lq_anf__d1Pv :: "{v : [(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)] | null v <=> false && len v >= 0}"
93:35-93:36::lq_anf__d1Pr :: "(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)"
93:37-93:38::lq_anf__d1Ps :: "(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)"
95:3-95:6::$c* :: "Fibonacci.Matrix -> Fibonacci.Matrix -> Fibonacci.Matrix"
96:5-96:11::_ :: "(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix"
96:12-96:48::lq_anf__d1PO :: "(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)"
96:13-96:14::a :: "{v : GHC.Integer.Type.Integer | v == a}"
96:14-96:15::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
96:15-96:16::e :: "{v : GHC.Integer.Type.Integer | v == e}"
96:16-96:17::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}"
96:17-96:18::b :: "{v : GHC.Integer.Type.Integer | v == b}"
96:18-96:19::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
96:19-96:20::g :: "{v : GHC.Integer.Type.Integer | v == g}"
96:22-96:23::a :: "{v : GHC.Integer.Type.Integer | v == a}"
96:23-96:24::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
96:24-96:25::f :: "{v : GHC.Integer.Type.Integer | v == f}"
96:25-96:26::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}"
96:26-96:27::b :: "{v : GHC.Integer.Type.Integer | v == b}"
96:27-96:28::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
96:28-96:29::h :: "{v : GHC.Integer.Type.Integer | v == h}"
96:31-96:32::c :: "{v : GHC.Integer.Type.Integer | v == c}"
96:32-96:33::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
96:33-96:34::e :: "{v : GHC.Integer.Type.Integer | v == e}"
96:34-96:35::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}"
96:35-96:36::d :: "{v : GHC.Integer.Type.Integer | v == d}"
96:36-96:37::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
96:37-96:38::g :: "{v : GHC.Integer.Type.Integer | v == g}"
96:40-96:41::c :: "{v : GHC.Integer.Type.Integer | v == c}"
96:41-96:42::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
96:42-96:43::f :: "{v : GHC.Integer.Type.Integer | v == f}"
96:43-96:44::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}"
96:44-96:45::d :: "{v : GHC.Integer.Type.Integer | v == d}"
96:45-96:46::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
96:46-96:47::h :: "{v : GHC.Integer.Type.Integer | v == h}"
99:1-99:6::Fibonacci.scale :: "GHC.Integer.Type.Integer -> Fibonacci.Matrix -> Fibonacci.Matrix"
99:7-99:8::n :: "GHC.Integer.Type.Integer"
99:22-99:28::Fibonacci.Matrix :: "(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix"
99:29-99:30::_ :: "((GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n -> Fibonacci.Matrix)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix"
99:31-99:38::_ :: "(GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)"
99:40-99:41::_ :: "x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
99:41-99:42::_ :: "{v : GHC.Integer.Type.Integer | v == n}"
99:44-99:45::lq_anf__d1Qh :: "(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)"
102:1-102:5::Fibonacci.fib4 :: "GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer"
103:10-103:13::snd :: "Fibonacci.Matrix -> GHC.Integer.Type.Integer"
103:14-103:15::_ :: "(Fibonacci.Matrix -> GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix -> GHC.Integer.Type.Integer"
103:16-103:18::f1 :: "{v : Fibonacci.Matrix | v == f1}"
103:18-103:19::Fibonacci.$fNumMatrix :: "(GHC.Num.Num Fibonacci.Matrix)"
103:19-103:20::ds_d1Np :: "GHC.Integer.Type.Integer"
104:9-104:11::f1 :: "Fibonacci.Matrix"
104:14-104:20::_ :: "(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)\n-> Fibonacci.Matrix"
104:21-104:30::lq_anf__d1QI :: "(GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)"
105:9-105:12::snd :: "Fibonacci.Matrix -> GHC.Integer.Type.Integer"
105:34-105:35::b :: "{v : GHC.Integer.Type.Integer | v == b}"