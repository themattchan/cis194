{"status":"safe","types":{"51":{"22":{"ann":"a","ident":"lq_anf__d3NO","row":51,"col":22},"12":{"ann":"forall a b.\n(Calc.MinMax a) -> (a -> (Calc.MinMax b)) -> (Calc.MinMax b)","ident":"$c>>=","row":51,"col":12},"16":{"ann":"a -> (Calc.MinMax b)","ident":"f","row":51,"col":16},"20":{"ann":"a -> (Calc.MinMax b)","ident":"_","row":51,"col":20}},"73":{"15":{"ann":"(Calc.Expr (Calc.Mod7 GHC.Integer.Type.Integer))","ident":"Calc.$fExprMod7","row":73,"col":15},"1":{"ann":"(Data.Maybe.Maybe (Calc.Mod7 GHC.Integer.Type.Integer))","ident":"Calc.testSat","row":73,"col":1}},"15":{"37":{"ann":"{v : ExprT.ExprT | v == e2}","ident":"e2","row":15,"col":37},"22":{"ann":"ExprT.ExprT -> GHC.Integer.Type.Integer","ident":"Calc.eval","row":15,"col":22},"30":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":15,"col":30},"27":{"ann":"{v : ExprT.ExprT | v == e1}","ident":"e1","row":15,"col":27},"32":{"ann":"ExprT.ExprT -> GHC.Integer.Type.Integer","ident":"Calc.eval","row":15,"col":32}},"37":{"3":{"ann":"x1:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1}","ident":"$clit","row":37,"col":3},"9":{"ann":"x1:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1}","ident":"_","row":37,"col":9}},"78":{"15":{"ann":"x1:[StackVM.StackExp]\n-> x2:[StackVM.StackExp]\n-> {v : [StackVM.StackExp] | len v == len x1 + len v}","ident":"_","row":78,"col":15},"7":{"ann":"[StackVM.StackExp]","ident":"x","row":78,"col":7},"13":{"ann":"{v : [StackVM.StackExp] | v == x && len v >= 0}","ident":"x","row":78,"col":13},"23":{"ann":"{v : [StackVM.StackExp] | null v <=> false && xListSelector v == StackVM.Add && len v >= 0}","ident":"lq_anf__d3NY","row":78,"col":23},"18":{"ann":"{v : [StackVM.StackExp] | v == y && len v >= 0}","ident":"y","row":78,"col":18},"20":{"ann":"x1:[StackVM.StackExp]\n-> x2:[StackVM.StackExp]\n-> {v : [StackVM.StackExp] | len v == len x1 + len v}","ident":"_","row":78,"col":20},"3":{"ann":"[StackVM.StackExp] -> [StackVM.StackExp] -> [StackVM.StackExp]","ident":"$cadd","row":78,"col":3},"24":{"ann":"{v : StackVM.StackExp | v == StackVM.Add}","ident":"StackVM.Add","row":78,"col":24},"9":{"ann":"[StackVM.StackExp]","ident":"y","row":78,"col":9}},"43":{"3":{"ann":"x1:GHC.Types.Bool\n-> x2:GHC.Types.Bool\n-> {v : GHC.Types.Bool | Prop v <=> Prop x1 || Prop v}","ident":"$cadd","row":43,"col":3},"9":{"ann":"x1:GHC.Types.Bool\n-> x2:GHC.Types.Bool\n-> {v : GHC.Types.Bool | Prop v <=> Prop x1 || Prop v}","ident":"_","row":43,"col":9}},"82":{"28":{"ann":"[StackVM.StackExp] -> [StackVM.StackExp] -> [StackVM.StackExp]","ident":"lq_anf__d3OY","row":82,"col":28},"1":{"ann":"[GHC.Types.Char] -> (Data.Maybe.Maybe [StackVM.StackExp])","ident":"Calc.compile","row":82,"col":1},"20":{"ann":"GHC.Integer.Type.Integer -> [StackVM.StackExp]","ident":"lq_anf__d3OW","row":82,"col":20},"11":{"ann":"(GHC.Integer.Type.Integer -> [StackVM.StackExp])\n-> ([StackVM.StackExp] -> [StackVM.StackExp] -> [StackVM.StackExp])\n-> ([StackVM.StackExp] -> [StackVM.StackExp] -> [StackVM.StackExp])\n-> [GHC.Types.Char]\n-> (Data.Maybe.Maybe [StackVM.StackExp])","ident":"_","row":82,"col":11},"24":{"ann":"[StackVM.StackExp] -> [StackVM.StackExp] -> [StackVM.StackExp]","ident":"lq_anf__d3OX","row":82,"col":24}},"28":{"3":{"ann":"GHC.Integer.Type.Integer -> ExprT.ExprT","ident":"$clit","row":28,"col":3},"9":{"ann":"GHC.Integer.Type.Integer -> ExprT.ExprT","ident":"_","row":28,"col":9}},"57":{"10":{"ann":"(Calc.Expr (Calc.MinMax GHC.Integer.Type.Integer))","ident":"Calc.$fExprMinMax","row":57,"col":10}},"13":{"22":{"ann":"{v : GHC.Integer.Type.Integer | v == e}","ident":"e","row":13,"col":22},"1":{"ann":"ExprT.ExprT -> GHC.Integer.Type.Integer","ident":"Calc.eval","row":13,"col":1}},"14":{"37":{"ann":"{v : ExprT.ExprT | v == e2}","ident":"e2","row":14,"col":37},"22":{"ann":"ExprT.ExprT -> GHC.Integer.Type.Integer","ident":"Calc.eval","row":14,"col":22},"30":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}","ident":"_","row":14,"col":30},"27":{"ann":"{v : ExprT.ExprT | v == e1}","ident":"e1","row":14,"col":27},"32":{"ann":"ExprT.ExprT -> GHC.Integer.Type.Integer","ident":"Calc.eval","row":14,"col":32}},"36":{"10":{"ann":"(Calc.Expr GHC.Integer.Type.Integer)","ident":"Calc.$fExprInteger","row":36,"col":10}},"49":{"10":{"ann":"(GHC.Base.Monad Calc.MinMax)","ident":"Calc.$fMonadMinMax","row":49,"col":10}},"50":{"20":{"ann":"a -> (Calc.MinMax a)","ident":"_","row":50,"col":20},"3":{"ann":"forall a. a -> (Calc.MinMax a)","ident":"$creturn","row":50,"col":3}},"72":{"15":{"ann":"{v : (Calc.Expr (Calc.MinMax GHC.Integer.Type.Integer)) | v == Calc.$fExprMinMax}","ident":"Calc.$fExprMinMax","row":72,"col":15},"1":{"ann":"(Data.Maybe.Maybe (Calc.MinMax GHC.Integer.Type.Integer))","ident":"Calc.testMM","row":72,"col":1}},"101":{"10":{"ann":"(Calc.Expr (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n           -> (Data.Maybe.Maybe GHC.Integer.Type.Integer))","ident":"Calc.$fExpr(->)","row":101,"col":10}},"19":{"44":{"ann":"ExprT.ExprT -> ExprT.ExprT -> ExprT.ExprT","ident":"ExprT.Mul","row":19,"col":44},"1":{"ann":"[GHC.Types.Char] -> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"Calc.evalStr","row":19,"col":1},"23":{"ann":"(GHC.Integer.Type.Integer -> ExprT.ExprT)\n-> (ExprT.ExprT -> ExprT.ExprT -> ExprT.ExprT)\n-> (ExprT.ExprT -> ExprT.ExprT -> ExprT.ExprT)\n-> [GHC.Types.Char]\n-> (Data.Maybe.Maybe ExprT.ExprT)","ident":"_","row":19,"col":23},"16":{"ann":"ExprT.ExprT -> GHC.Integer.Type.Integer","ident":"Calc.eval","row":19,"col":16},"11":{"ann":"(ExprT.ExprT -> GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe ExprT.ExprT)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"_","row":19,"col":11},"38":{"ann":"ExprT.ExprT -> ExprT.ExprT -> ExprT.ExprT","ident":"ExprT.Add","row":19,"col":38},"21":{"ann":"((Data.Maybe.Maybe ExprT.ExprT)\n -> (Data.Maybe.Maybe GHC.Integer.Type.Integer))\n-> ([GHC.Types.Char] -> (Data.Maybe.Maybe ExprT.ExprT))\n-> [GHC.Types.Char]\n-> exists [(Data.Maybe.Maybe ExprT.ExprT)].(Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"_","row":19,"col":21},"32":{"ann":"GHC.Integer.Type.Integer -> ExprT.ExprT","ident":"ExprT.Lit","row":19,"col":32}},"44":{"3":{"ann":"x1:GHC.Types.Bool\n-> x2:GHC.Types.Bool\n-> {v : GHC.Types.Bool | Prop v <=> Prop x1 && Prop v}","ident":"$cmul","row":44,"col":3},"9":{"ann":"x1:GHC.Types.Bool\n-> x2:GHC.Types.Bool\n-> {v : GHC.Types.Bool | Prop v <=> Prop x1 && Prop v}","ident":"_","row":44,"col":9}},"91":{"3":{"ann":"VarExprT.VarExprT -> VarExprT.VarExprT -> VarExprT.VarExprT","ident":"$cmul","row":91,"col":3},"9":{"ann":"VarExprT.VarExprT -> VarExprT.VarExprT -> VarExprT.VarExprT","ident":"_","row":91,"col":9}},"88":{"10":{"ann":"(Calc.Expr VarExprT.VarExprT)","ident":"Calc.$fExprVarExprT","row":88,"col":10}},"29":{"3":{"ann":"ExprT.ExprT -> ExprT.ExprT -> ExprT.ExprT","ident":"$cadd","row":29,"col":3},"9":{"ann":"ExprT.ExprT -> ExprT.ExprT -> ExprT.ExprT","ident":"_","row":29,"col":9}},"30":{"3":{"ann":"ExprT.ExprT -> ExprT.ExprT -> ExprT.ExprT","ident":"$cmul","row":30,"col":3},"9":{"ann":"ExprT.ExprT -> ExprT.ExprT -> ExprT.ExprT","ident":"_","row":30,"col":9}},"53":{"10":{"ann":"(GHC.Base.Monad Calc.Mod7)","ident":"Calc.$fMonadMod7","row":53,"col":10}},"71":{"15":{"ann":"{v : (Calc.Expr GHC.Types.Bool) | v == Calc.$fExprBool}","ident":"Calc.$fExprBool","row":71,"col":15},"1":{"ann":"(Data.Maybe.Maybe GHC.Types.Bool)","ident":"Calc.testBool","row":71,"col":1}},"68":{"28":{"ann":"a -> a -> a","ident":"lq_anf__d3NM","row":68,"col":28},"1":{"ann":"forall a. (Calc.Expr [Bivariant]\n[] a) => (Data.Maybe.Maybe a)","ident":"Calc.testExp","row":68,"col":1},"20":{"ann":"GHC.Integer.Type.Integer -> a","ident":"lq_anf__d3NK","row":68,"col":20},"11":{"ann":"(GHC.Integer.Type.Integer -> a)\n-> (a -> a -> a)\n-> (a -> a -> a)\n-> [GHC.Types.Char]\n-> (Data.Maybe.Maybe a)","ident":"_","row":68,"col":11},"24":{"ann":"a -> a -> a","ident":"lq_anf__d3NL","row":68,"col":24},"32":{"ann":"{v : [GHC.Types.Char] | len v >= 0}","ident":"lq_anf__d3NN","row":68,"col":32}},"90":{"3":{"ann":"VarExprT.VarExprT -> VarExprT.VarExprT -> VarExprT.VarExprT","ident":"$cadd","row":90,"col":3},"9":{"ann":"VarExprT.VarExprT -> VarExprT.VarExprT -> VarExprT.VarExprT","ident":"_","row":90,"col":9}},"89":{"3":{"ann":"GHC.Integer.Type.Integer -> VarExprT.VarExprT","ident":"$clit","row":89,"col":3},"9":{"ann":"GHC.Integer.Type.Integer -> VarExprT.VarExprT","ident":"_","row":89,"col":9}},"62":{"10":{"ann":"(Calc.Expr (Calc.Mod7 GHC.Integer.Type.Integer))","ident":"Calc.$fExprMod7","row":62,"col":10}},"59":{"16":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == if (x1 > v) then x1 else v}","ident":"lq_anf__d3NQ","row":59,"col":16},"3":{"ann":"(Calc.MinMax GHC.Integer.Type.Integer)\n-> (Calc.MinMax GHC.Integer.Type.Integer)\n-> (Calc.MinMax GHC.Integer.Type.Integer)","ident":"$cadd","row":59,"col":3},"9":{"ann":"(GHC.Base.Monad Calc.MinMax)","ident":"Calc.$fMonadMinMax","row":59,"col":9}},"70":{"15":{"ann":"{v : (Calc.Expr GHC.Integer.Type.Integer) | v == Calc.$fExprInteger}","ident":"Calc.$fExprInteger","row":70,"col":15},"1":{"ann":"(Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"Calc.testInteger","row":70,"col":1}},"103":{"15":{"ann":"(GHC.Integer.Type.Integer\n -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"_","row":103,"col":15},"7":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"a","row":103,"col":7},"22":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + v}","ident":"lq_anf__d3OD","row":103,"col":22},"29":{"ann":"{v : (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer) | v == e}","ident":"e","row":103,"col":29},"35":{"ann":"{v : (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer) | v == e}","ident":"e","row":103,"col":35},"27":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"_","row":103,"col":27},"11":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)","ident":"e","row":103,"col":11},"33":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"_","row":103,"col":33},"3":{"ann":"((Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n -> (Data.Maybe.Maybe GHC.Integer.Type.Integer))\n-> ((Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n    -> (Data.Maybe.Maybe GHC.Integer.Type.Integer))\n-> (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"$cadd","row":103,"col":3},"9":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"b","row":103,"col":9}},"39":{"3":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"$cmul","row":39,"col":3},"9":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"_","row":39,"col":9}},"46":{"45":{"ann":"forall a.\n(GHC.Classes.Eq [Contravariant]\n[] a) =>\n(GHC.Classes.Eq (Calc.MinMax a))","ident":"Calc.$fEqMinMax","row":46,"col":45},"39":{"ann":"forall a.\n(GHC.Show.Show [Contravariant]\n[] a) =>\n(GHC.Show.Show (Calc.MinMax a))","ident":"Calc.$fShowMinMax","row":46,"col":39}},"64":{"7":{"ann":"(Calc.Mod7 GHC.Integer.Type.Integer)","ident":"a","row":64,"col":7},"28":{"ann":"(GHC.Base.Monad Calc.Mod7)","ident":"Calc.$fMonadMod7","row":64,"col":28},"13":{"ann":"(GHC.Base.Monad Calc.Mod7)","ident":"Calc.$fMonadMod7","row":64,"col":13},"26":{"ann":"{v : (Calc.Mod7 GHC.Integer.Type.Integer) | v == b}","ident":"b","row":64,"col":26},"20":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + v}","ident":"lq_anf__d3OJ","row":64,"col":20},"3":{"ann":"(Calc.Mod7 GHC.Integer.Type.Integer)\n-> (Calc.Mod7 GHC.Integer.Type.Integer)\n-> (Calc.Mod7 GHC.Integer.Type.Integer)","ident":"$cadd","row":64,"col":3},"24":{"ann":"{v : (Calc.Mod7 GHC.Integer.Type.Integer) | v == a}","ident":"a","row":64,"col":24},"9":{"ann":"(Calc.Mod7 GHC.Integer.Type.Integer)","ident":"b","row":64,"col":9},"32":{"ann":"GHC.Integer.Type.Integer -> (Calc.Mod7 GHC.Integer.Type.Integer)","ident":"lq_anf__d3OL","row":64,"col":32}},"93":{"10":{"ann":"(Calc.HasVars VarExprT.VarExprT)","ident":"Calc.$fHasVarsVarExprT","row":93,"col":10}},"94":{"3":{"ann":"[GHC.Types.Char] -> VarExprT.VarExprT","ident":"$cvar","row":94,"col":3},"9":{"ann":"[GHC.Types.Char] -> VarExprT.VarExprT","ident":"_","row":94,"col":9}},"104":{"15":{"ann":"(GHC.Integer.Type.Integer\n -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"_","row":104,"col":15},"7":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"a","row":104,"col":7},"22":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"lq_anf__d3OG","row":104,"col":22},"29":{"ann":"{v : (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer) | v == e}","ident":"e","row":104,"col":29},"35":{"ann":"{v : (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer) | v == e}","ident":"e","row":104,"col":35},"27":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"_","row":104,"col":27},"11":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)","ident":"e","row":104,"col":11},"33":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"_","row":104,"col":33},"3":{"ann":"((Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n -> (Data.Maybe.Maybe GHC.Integer.Type.Integer))\n-> ((Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n    -> (Data.Maybe.Maybe GHC.Integer.Type.Integer))\n-> (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"$cmul","row":104,"col":3},"9":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"b","row":104,"col":9}},"58":{"3":{"ann":"GHC.Integer.Type.Integer -> (Calc.MinMax GHC.Integer.Type.Integer)","ident":"$clit","row":58,"col":3},"9":{"ann":"(GHC.Base.Monad Calc.MinMax)","ident":"Calc.$fMonadMinMax","row":58,"col":9}},"27":{"10":{"ann":"(Calc.Expr ExprT.ExprT)","ident":"Calc.$fExprExprT","row":27,"col":10}},"41":{"10":{"ann":"(Calc.Expr GHC.Types.Bool)","ident":"Calc.$fExprBool","row":41,"col":10}},"63":{"13":{"ann":"GHC.Integer.Type.Integer -> (Calc.Mod7 GHC.Integer.Type.Integer)","ident":"lq_anf__d3NS","row":63,"col":13},"23":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:{v : GHC.Integer.Type.Integer | v /= 0}\n-> {v : GHC.Integer.Type.Integer | 0 <= x1 && 0 < x2 => 0 <= v && v < x2 && v == x1 mod x2}","ident":"_","row":63,"col":23},"20":{"ann":"(GHC.Integer.Type.Integer -> (Calc.Mod7 GHC.Integer.Type.Integer))\n-> (GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)\n-> GHC.Integer.Type.Integer\n-> exists [GHC.Integer.Type.Integer].(Calc.Mod7 GHC.Integer.Type.Integer)","ident":"_","row":63,"col":20},"3":{"ann":"GHC.Integer.Type.Integer -> (Calc.Mod7 GHC.Integer.Type.Integer)","ident":"$clit","row":63,"col":3}},"99":{"3":{"ann":"[GHC.Types.Char]\n-> (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"$cvar","row":99,"col":3},"9":{"ann":"[GHC.Types.Char]\n-> (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"_","row":99,"col":9}},"55":{"14":{"ann":"a -> (Calc.Mod7 b)","ident":"f","row":55,"col":14},"18":{"ann":"a -> (Calc.Mod7 b)","ident":"_","row":55,"col":18},"20":{"ann":"a","ident":"lq_anf__d3NP","row":55,"col":20},"10":{"ann":"forall a b. (Calc.Mod7 a) -> (a -> (Calc.Mod7 b)) -> (Calc.Mod7 b)","ident":"$c>>=","row":55,"col":10}},"77":{"15":{"ann":"{v : [StackVM.StackExp] | null v <=> true && len v == 0}","ident":"_","row":77,"col":15},"14":{"ann":"x1:StackVM.StackExp\n-> x2:[StackVM.StackExp]\n-> {v : [StackVM.StackExp] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}","ident":"_","row":77,"col":14},"19":{"ann":"(StackVM.StackExp -> [StackVM.StackExp])\n-> (GHC.Integer.Type.Integer -> StackVM.StackExp)\n-> GHC.Integer.Type.Integer\n-> exists [StackVM.StackExp].[StackVM.StackExp]","ident":"_","row":77,"col":19},"3":{"ann":"GHC.Integer.Type.Integer -> [StackVM.StackExp]","ident":"$clit","row":77,"col":3},"21":{"ann":"GHC.Integer.Type.Integer -> StackVM.StackExp","ident":"StackVM.PushI","row":77,"col":21}},"33":{"1":{"ann":"ExprT.ExprT -> ExprT.ExprT","ident":"Calc.reify","row":33,"col":1},"9":{"ann":"forall a. x1:a -> {VV : a | VV == x1}","ident":"GHC.Base.id","row":33,"col":9}},"38":{"3":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}","ident":"$cadd","row":38,"col":3},"9":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == x1 + x2}","ident":"_","row":38,"col":9}},"47":{"45":{"ann":"forall a.\n(GHC.Classes.Eq [Contravariant]\n[] a) =>\n(GHC.Classes.Eq (Calc.Mod7 a))","ident":"Calc.$fEqMod7","row":47,"col":45},"39":{"ann":"forall a.\n(GHC.Show.Show [Contravariant]\n[] a) =>\n(GHC.Show.Show (Calc.Mod7 a))","ident":"Calc.$fShowMod7","row":47,"col":39}},"65":{"7":{"ann":"(Calc.Mod7 GHC.Integer.Type.Integer)","ident":"a","row":65,"col":7},"28":{"ann":"(GHC.Base.Monad Calc.Mod7)","ident":"Calc.$fMonadMod7","row":65,"col":28},"13":{"ann":"(GHC.Base.Monad Calc.Mod7)","ident":"Calc.$fMonadMod7","row":65,"col":13},"26":{"ann":"{v : (Calc.Mod7 GHC.Integer.Type.Integer) | v == b}","ident":"b","row":65,"col":26},"20":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}","ident":"lq_anf__d3OM","row":65,"col":20},"3":{"ann":"(Calc.Mod7 GHC.Integer.Type.Integer)\n-> (Calc.Mod7 GHC.Integer.Type.Integer)\n-> (Calc.Mod7 GHC.Integer.Type.Integer)","ident":"$cmul","row":65,"col":3},"24":{"ann":"{v : (Calc.Mod7 GHC.Integer.Type.Integer) | v == a}","ident":"a","row":65,"col":24},"9":{"ann":"(Calc.Mod7 GHC.Integer.Type.Integer)","ident":"b","row":65,"col":9},"32":{"ann":"GHC.Integer.Type.Integer -> (Calc.Mod7 GHC.Integer.Type.Integer)","ident":"lq_anf__d3OO","row":65,"col":32}},"102":{"15":{"ann":"x1:GHC.Integer.Type.Integer\n-> {v : (Data.Maybe.Maybe GHC.Integer.Type.Integer) | isJust v <=> true && fromJust v == x1}","ident":"_","row":102,"col":15},"7":{"ann":"GHC.Integer.Type.Integer","ident":"x","row":102,"col":7},"20":{"ann":"{v : GHC.Integer.Type.Integer | v == x}","ident":"x","row":102,"col":20},"11":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)","ident":"e","row":102,"col":11},"3":{"ann":"x:GHC.Integer.Type.Integer\n-> (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> {v : (Data.Maybe.Maybe GHC.Integer.Type.Integer) | isJust v <=> true && fromJust v == x}","ident":"$clit","row":102,"col":3}},"79":{"15":{"ann":"x1:[StackVM.StackExp]\n-> x2:[StackVM.StackExp]\n-> {v : [StackVM.StackExp] | len v == len x1 + len v}","ident":"_","row":79,"col":15},"7":{"ann":"[StackVM.StackExp]","ident":"x","row":79,"col":7},"13":{"ann":"{v : [StackVM.StackExp] | v == x && len v >= 0}","ident":"x","row":79,"col":13},"23":{"ann":"{v : [StackVM.StackExp] | null v <=> false && xListSelector v == StackVM.Mul && len v >= 0}","ident":"lq_anf__d3NV","row":79,"col":23},"18":{"ann":"{v : [StackVM.StackExp] | v == y && len v >= 0}","ident":"y","row":79,"col":18},"20":{"ann":"x1:[StackVM.StackExp]\n-> x2:[StackVM.StackExp]\n-> {v : [StackVM.StackExp] | len v == len x1 + len v}","ident":"_","row":79,"col":20},"3":{"ann":"[StackVM.StackExp] -> [StackVM.StackExp] -> [StackVM.StackExp]","ident":"$cmul","row":79,"col":3},"24":{"ann":"{v : StackVM.StackExp | v == StackVM.Mul}","ident":"StackVM.Mul","row":79,"col":24},"9":{"ann":"[StackVM.StackExp]","ident":"y","row":79,"col":9}},"42":{"3":{"ann":"GHC.Integer.Type.Integer -> GHC.Types.Bool","ident":"$clit","row":42,"col":3},"10":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Types.Bool | Prop v <=> x1 > v}","ident":"_","row":42,"col":10}},"60":{"16":{"ann":"x1:GHC.Integer.Type.Integer\n-> x2:GHC.Integer.Type.Integer\n-> {v : GHC.Integer.Type.Integer | v == if (x1 < v) then x1 else v}","ident":"lq_anf__d3NR","row":60,"col":16},"3":{"ann":"(Calc.MinMax GHC.Integer.Type.Integer)\n-> (Calc.MinMax GHC.Integer.Type.Integer)\n-> (Calc.MinMax GHC.Integer.Type.Integer)","ident":"$cmul","row":60,"col":3},"9":{"ann":"(GHC.Base.Monad Calc.MinMax)","ident":"Calc.$fMonadMinMax","row":60,"col":9}},"107":{"25":{"ann":"[([GHC.Types.Char], GHC.Integer.Type.Integer)]\n-> (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)","ident":"_","row":107,"col":25},"13":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"exp","row":107,"col":13},"36":{"ann":"{v : [([GHC.Types.Char], GHC.Integer.Type.Integer)] | v == vs && len v >= 0}","ident":"vs","row":107,"col":36},"19":{"ann":"(Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"exp","row":107,"col":19},"1":{"ann":"[([GHC.Types.Char], GHC.Integer.Type.Integer)]\n-> ((Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n    -> (Data.Maybe.Maybe GHC.Integer.Type.Integer))\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"Calc.withVars","row":107,"col":1},"23":{"ann":"((Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n -> (Data.Maybe.Maybe GHC.Integer.Type.Integer))\n-> (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n-> (Data.Maybe.Maybe GHC.Integer.Type.Integer)","ident":"_","row":107,"col":23},"10":{"ann":"[([GHC.Types.Char], GHC.Integer.Type.Integer)]","ident":"vs","row":107,"col":10}},"54":{"18":{"ann":"a -> (Calc.Mod7 a)","ident":"_","row":54,"col":18},"3":{"ann":"forall a. a -> (Calc.Mod7 a)","ident":"$creturn","row":54,"col":3}},"76":{"10":{"ann":"(Calc.Expr [StackVM.StackExp])","ident":"Calc.$fExpr[]","row":76,"col":10}},"98":{"10":{"ann":"(Calc.HasVars (Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer)\n              -> (Data.Maybe.Maybe GHC.Integer.Type.Integer))","ident":"Calc.$fHasVars(->)","row":98,"col":10}}},"errors":[]}