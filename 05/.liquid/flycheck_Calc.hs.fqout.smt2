(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)
(set-option :smt.mbqi false)
(define-sort SMT_Elt () Int)
(define-sort SMT_Set () (Array SMT_Elt Bool))
(define-fun smt_set_emp () SMT_Set ((as const SMT_Set) false))
(define-fun smt_set_mem ((x SMT_Elt) (s SMT_Set)) Bool (select s x))
(define-fun smt_set_add ((s SMT_Set) (x SMT_Elt)) SMT_Set (store s x true))
(define-fun smt_set_cup ((s1 SMT_Set) (s2 SMT_Set)) SMT_Set ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 SMT_Set) (s2 SMT_Set)) SMT_Set ((_ map and) s1 s2))
(define-fun smt_set_com ((s SMT_Set)) SMT_Set ((_ map not) s))
(define-fun smt_set_dif ((s1 SMT_Set) (s2 SMT_Set)) SMT_Set (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 SMT_Set) (s2 SMT_Set)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(declare-fun z3v62 () Int)
(declare-fun z3v63 () Int)
(assert (distinct z3v62 z3v63))
(declare-fun z3v64 () Int)
(declare-fun z3v65 () Int)
(declare-fun z3v66 () Int)
(declare-fun z3v67 () Int)
(declare-fun z3v68 () Int)
(declare-fun z3v69 () Int)
(declare-fun z3v70 () Int)
(declare-fun z3v71 () Int)
(declare-fun z3v72 () Int)
(declare-fun z3v73 () Int)
(declare-fun z3v74 () Int)
(declare-fun z3v75 () Int)
(declare-fun z3v76 () Int)
(declare-fun z3v77 () Int)
(declare-fun z3v78 () Int)
(declare-fun z3v79 () Int)
(declare-fun z3v80 () Int)
(declare-fun z3v81 () Int)
(declare-fun z3v82 () Int)
(declare-fun z3f83 (Int) Int)
(declare-fun z3v84 () Int)
(declare-fun z3v85 () Int)
(push 1)
(assert true)
(assert (and (= z3v65 z3v64) (= z3v67 z3v66) (= z3v69 z3v68) (= z3v71 z3v70) (= z3v73 z3v72) (= z3v75 z3v74) (= z3v77 z3v76) (= z3v79 z3v78) (= z3v81 z3v80) (= (z3f83 z3v82) z3v82) (= (z3f83 z3v84) z3v84) (= (z3f83 z3v85) z3v85)))
(declare-fun z3v86 () Int)
(push 1)
(assert (not (= z3v86 1)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v86 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v86 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v86 0))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= z3v86 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v86 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v86 0)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v87 () Int)
(push 1)
(assert true)
(assert (and (= z3v67 z3v66) (= z3v69 z3v68) (= z3v73 z3v72) (= z3v77 z3v76) (= z3v79 z3v78) (= z3v87 7) (= (z3f83 z3v82) z3v82) (= (z3f83 z3v84) z3v84) (= (z3f83 z3v85) z3v85)))
(declare-fun z3v88 () Int)
(push 1)
(assert (not (= z3v88 1)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v88 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v88 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v88 0))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= z3v88 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v88 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v88 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v88 z3v87))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= z3v88 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= z3v88 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v88 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v88 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v88 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v88 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v88 z3v87))))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v88 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v88 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v88 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v88 z3v87)))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert true)
(assert (and (= z3v67 z3v66) (= z3v69 z3v68) (= z3v73 z3v72) (= z3v77 z3v76) (= z3v79 z3v78) (= z3v87 7) (= (z3f83 z3v82) z3v82) (= (z3f83 z3v84) z3v84) (= (z3f83 z3v85) z3v85)))
(declare-fun z3v89 () Int)
(push 1)
(assert (not (= z3v89 1)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v89 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v89 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v89 0))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= z3v89 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v89 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v89 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v89 z3v87))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= z3v89 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= z3v89 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v89 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v89 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v89 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>  z3v89 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= z3v89 z3v87))))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v89 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= z3v89 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= z3v89 z3v87)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<  z3v89 z3v87)))
(check-sat)
(pop 1)
(pop 1)
(declare-fun z3v90 () Int)
(declare-fun z3v91 () Int)
(push 1)
(assert true)
(assert (= z3v91 z3v87))
(assert (= z3v91 7))
(assert (and (= z3v67 z3v66) (= z3v69 z3v68) (= z3v73 z3v72) (= z3v77 z3v76) (= z3v79 z3v78) (= z3v87 7) (= z3v90 z3v87) (= z3v90 7) (= (z3f83 z3v82) z3v82) (= (z3f83 z3v84) z3v84) (= (z3f83 z3v85) z3v85)))
(push 1)
(assert (not (not (= z3v91 0))))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert true)
(assert (and (= z3v67 z3v66) (= z3v69 z3v68) (= z3v73 z3v72) (= z3v77 z3v76) (= z3v79 z3v78) (= z3v87 7) (= (z3f83 z3v82) z3v82) (= (z3f83 z3v84) z3v84) (= (z3f83 z3v85) z3v85)))
(pop 1)
(push 1)
(assert true)
(assert (and (= z3v67 z3v66) (= z3v69 z3v68) (= z3v73 z3v72) (= z3v77 z3v76) (= z3v79 z3v78) (= z3v87 7) (= (z3f83 z3v82) z3v82) (= (z3f83 z3v84) z3v84) (= (z3f83 z3v85) z3v85)))
(pop 1)
(push 1)
(assert true)
(assert (and (= z3v65 z3v64) (= z3v67 z3v66) (= z3v69 z3v68) (= z3v71 z3v70) (= z3v73 z3v72) (= z3v75 z3v74) (= z3v77 z3v76) (= z3v79 z3v78) (= z3v81 z3v80) (= (z3f83 z3v82) z3v82) (= (z3f83 z3v84) z3v84) (= (z3f83 z3v85) z3v85)))
(pop 1)
